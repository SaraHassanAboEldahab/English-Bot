{"version":3,"sources":["images/english.png","images/left-arrow.png","contexts/dataContext.js","images/send.png","images/bot-icon.png","components/Typing.js","components/Chat.js","components/Bot.js","App.js","index.js"],"names":["Context","React","createContext","DataContext","children","useState","newData","setNewData","fetchData","a","axios","get","data","useEffect","console","log","Provider","value","Typing","TypingDiv","DotesContainer","Dot","styled","div","ul","typingAnimation","keyframes","li","socket","io","Chat","ref","useRef","message","useContext","dataContext","messages","setMessages","text","msg","setMsg","typing","setTyping","length","setTimeout","from","on","checkResult","result","corrections","toLowerCase","replace","toLocaleLowerCase","StyledCorrectDiv","current","addEventListener","event","target","currentTarget","scroll","top","scrollHeight","behavior","StyledMessages","map","index","StyledBotDiv","src","botIcon","alt","StyledMeDiv","StyledDiv","onSubmit","e","preventDefault","emit","sendMsg","onChange","type","placeholder","send","form","Bot","active","setActive","Header","Container","StyledBackImg","onClick","leftArrow","StyledH1","StyledBotImg","englishBot","Content","className","img","h1","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.f8b05a5a.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/english.9c170a25.png\";","export default __webpack_public_path__ + \"static/media/left-arrow.903af5d7.png\";","import React, { useEffect, useState } from \"react\";\r\nimport axios from \"axios\";\r\n\r\n//here we create context object\r\nconst Context = React.createContext();\r\n\r\nexport const DataContext = ({ children }) => {\r\n  const [newData, setNewData] = useState({});\r\n  const fetchData = async () => {\r\n    // const { data } = await axios.get(`/api/bot/${window.botSettings.id}`);\r\n    // const { data } = await axios.get(\r\n    //   `https://chat-plugv1.herokuapp.com/api/bot/614e63e0632c5bf001304b56?fbclid=IwAR2yTQqEV0CooA_1o3IUj0GyUgRTx00PpYFA9V_dBBphDn7wDowCsX6ZVVA`\r\n    // );\r\n    const { data } = await axios.get(\r\n      \"https://english-bot-test.herokuapp.com/api/bot-flow\"\r\n    );\r\n    setNewData(data);\r\n  };\r\n  useEffect(() => {\r\n    fetchData();\r\n    console.log(\">>>>>\", newData);\r\n  }, []);\r\n\r\n  return <Context.Provider value={newData}>{children}</Context.Provider>;\r\n};\r\n\r\nexport default Context;\r\n","export default __webpack_public_path__ + \"static/media/send.01c24b89.png\";","export default __webpack_public_path__ + \"static/media/bot-icon.cfbb308b.png\";","import React from \"react\";\r\nimport styled, { keyframes } from \"styled-components\";\r\n\r\nconst Typing = () => {\r\n  return (\r\n    <TypingDiv>\r\n      <DotesContainer>\r\n        <Dot />\r\n        <Dot />\r\n        <Dot />\r\n      </DotesContainer>\r\n    </TypingDiv>\r\n  );\r\n};\r\n\r\nexport default Typing;\r\n\r\nconst TypingDiv = styled.div`\r\n  background-color: #717171;\r\n  padding: 15px 20px;\r\n  border-radius: 20px;\r\n  border-bottom-left-radius: 2px;\r\n  width: fit-content;\r\n  margin: 0px 0px 20px 20px;\r\n`;\r\n\r\nconst DotesContainer = styled.ul`\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  list-style: none;\r\n  height: 17px;\r\n  padding: 0px;\r\n  margin: 0px;\r\n`;\r\n\r\nconst typingAnimation = keyframes`\r\n 0% {\r\n    transform: translateY(0px);\r\n    background-color:white;\r\n  }\r\n  28% {\r\n    transform: translateY(-7px);\r\n    background-color:#d9d8d8;\r\n  }\r\n  44% {\r\n    transform: translateY(0px);\r\n    background-color:#bbbaba;\r\n  }\r\n`;\r\n\r\nconst Dot = styled.li`\r\n  background-color: white;\r\n  border-radius: 50%;\r\n  height: 7px;\r\n  margin-right: 4px;\r\n  vertical-align: middle;\r\n  width: 7px;\r\n  &:nth-child(1) {\r\n    animation-delay: 200ms;\r\n  }\r\n  &:nth-child(2) {\r\n    animation-delay: 300ms;\r\n  }\r\n  &:nth-child(3) {\r\n    animation-delay: 400ms;\r\n  }\r\n  animation: ${typingAnimation} 1.8s infinite ease-in-out;\r\n`;\r\n","import React, { useState, useContext, useEffect, useRef } from \"react\";\r\nimport dataContext from \"../contexts/dataContext\";\r\nimport styled from \"styled-components\";\r\nimport send from \"../images/send.png\";\r\nimport { io } from \"socket.io-client\";\r\nimport botIcon from \"../images/bot-icon.png\";\r\nimport Typing from \"./Typing\";\r\n\r\nconst socket = io(\"wss://english-bot-test.herokuapp.com/\");\r\n\r\nconst Chat = () => {\r\n  const ref = useRef();\r\n\r\n  const { message } = useContext(dataContext);\r\n  const [messages, setMessages] = useState([]);\r\n\r\n  const [msg, setMsg] = useState({ text: \"\" });\r\n  const [typing, setTyping] = useState(true);\r\n\r\n  const scrollToBottom = () => {\r\n    ref.current.addEventListener(\"DOMNodeInserted\", (event) => {\r\n      const { currentTarget: target } = event;\r\n      target.scroll({ top: target.scrollHeight, behavior: \"smooth\" });\r\n    });\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (messages.length === 0) {\r\n      setTimeout(() => {\r\n        setMessages([\r\n          { from: \"English BOT\", text: \"👋🏻👋🏻\" },\r\n          { from: \"English BOT\", text: message?.text },\r\n        ]);\r\n        setTyping(false);\r\n      }, 2000);\r\n    }\r\n    socket.on(\"checkGrammerResult\", ({ message, result: checkResult }) => {\r\n      const { result, corrections } = checkResult;\r\n      if (\r\n        corrections?.length === 0 ||\r\n        message.toLowerCase().replace(/\\ /g, \"\") ===\r\n          result?.toLocaleLowerCase().replace(/\\ /g, \"\")\r\n      ) {\r\n        setTyping(false);\r\n        setMessages([\r\n          ...messages,\r\n          { from: \"English BOT\", text: \"u r right ✅ \" },\r\n        ]);\r\n        return;\r\n      }\r\n      setTyping(false);\r\n      setMessages([\r\n        ...messages,\r\n        {\r\n          from: \"English BOT\",\r\n          text: (\r\n            <StyledCorrectDiv>\r\n              <div>\r\n                you are too close , the correct answer is\r\n                <h4>{result}</h4>\r\n              </div>\r\n            </StyledCorrectDiv>\r\n          ),\r\n        },\r\n      ]);\r\n    });\r\n    scrollToBottom();\r\n  }, [messages]);\r\n\r\n  const sendMsg = (e) => {\r\n    e.preventDefault();\r\n    setMessages([...messages, { from: \"Me\", text: msg.text }]);\r\n    setTyping(true);\r\n    socket.emit(\"checkGrammer\", msg);\r\n    setMsg({ text: \"\" });\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <StyledMessages ref={ref}>\r\n        {messages.map(({ from, text }, index) => (\r\n          <>\r\n            {from === \"English BOT\" ? (\r\n              <StyledBotDiv key={index}>\r\n                <img src={botIcon} alt=\" \" />\r\n                <span>{text}</span>\r\n              </StyledBotDiv>\r\n            ) : (\r\n              <StyledMeDiv key={index}>\r\n                <span>{text}</span>\r\n              </StyledMeDiv>\r\n            )}\r\n          </>\r\n        ))}\r\n      </StyledMessages>\r\n      {typing && <Typing />}\r\n      <StyledDiv onSubmit={(e) => sendMsg(e)}>\r\n        <input\r\n          value={msg.text}\r\n          onChange={(e) => setMsg({ text: e.target.value })}\r\n          type=\"text\"\r\n          placeholder=\"send a message...\"\r\n        />\r\n        <button type=\"submit\">\r\n          <img src={send} alt=\"\" />\r\n        </button>\r\n      </StyledDiv>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Chat;\r\n\r\nconst StyledDiv = styled.form`\r\n  display: flex;\r\n  width: 100%;\r\n  border-top: 1px solid rgb(230, 230, 230);\r\n  input {\r\n    border: none;\r\n    height: 40px;\r\n    width: 80%;\r\n    padding: 10px 20px;\r\n    outline: 0;\r\n  }\r\n  button {\r\n    border: none;\r\n    background-color: white;\r\n    width: 18%;\r\n    display: flex;\r\n    justify-content: end;\r\n    align-items: center;\r\n    img {\r\n      width: 32px;\r\n      height: 32px;\r\n    }\r\n  }\r\n`;\r\n\r\nconst StyledMessages = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  max-height: 400px;\r\n  min-height: 400px;\r\n  background: white;\r\n  overflow-y: auto;\r\n  padding: 15px 20px;\r\n  span {\r\n    width: fit-content;\r\n    height: fit-content;\r\n    border-top-left-radius: 10px;\r\n    border-top-right-radius: 10px;\r\n    border-bottom-right-radius: 10px;\r\n    margin-bottom: 10px;\r\n  }\r\n`;\r\n\r\nconst StyledBotDiv = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  span {\r\n    background-color: #717171;\r\n    color: white;\r\n    padding: 10px;\r\n  }\r\n  img {\r\n    width: 40px;\r\n    height: 40px;\r\n    margin-right: 10px;\r\n  }\r\n`;\r\n\r\nconst StyledMeDiv = styled.div`\r\n  margin-left: auto;\r\n  span {\r\n    display: block;\r\n    background-color: #0073a5;\r\n    color: white;\r\n    margin-left: 10px;\r\n    padding: 10px;\r\n  }\r\n`;\r\n\r\nconst StyledCorrectDiv = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  h4 {\r\n    display: inline-block;\r\n    color: #74eaf4;\r\n    margin: 0px 0px 0px 10px;\r\n  }\r\n`;\r\n","import React, { useState } from \"react\";\r\nimport styled from \"styled-components\";\r\nimport englishBot from \"../images/english.png\";\r\nimport leftArrow from \"../images/left-arrow.png\";\r\nimport Chat from \"./Chat\";\r\n\r\nconst Bot = () => {\r\n  const [active, setActive] = useState(false);\r\n  return (\r\n    <>\r\n      <Header>\r\n        <Container>\r\n          {active && (\r\n            <StyledBackImg\r\n              onClick={() => setActive(false)}\r\n              src={leftArrow}\r\n              alt=\"\"\r\n            />\r\n          )}\r\n\r\n          <StyledH1>\r\n            <StyledBotImg src={englishBot} alt=\"\" />\r\n            <span> English Bot </span>\r\n          </StyledH1>\r\n          <p>I can help you to improve your english.</p>\r\n        </Container>\r\n      </Header>\r\n      <Container>\r\n        <Content>\r\n          {!active && (\r\n            <StyledDiv>\r\n              <h3>Get Started</h3>\r\n              <div>\r\n                <span className=\"replyNote\">My usual reply time</span>\r\n                <br />\r\n                <span className=\"replyTome\">🕓 Under 1 min</span>\r\n              </div>\r\n              <button onClick={() => setActive(true)}>Get Started</button>\r\n            </StyledDiv>\r\n          )}\r\n          {active && <Chat />}\r\n        </Content>\r\n      </Container>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Bot;\r\n\r\n//styles\r\nconst Container = styled.div`\r\n  padding: 0px 25px;\r\n`;\r\n\r\nconst StyledBackImg = styled.img`\r\n  width: 20px;\r\n  height: 20px;\r\n  margin: 0px 10px 20px 0px;\r\n  cursor: pointer;\r\n`;\r\nconst StyledBotImg = styled.img`\r\n  width: 50px;\r\n  height: 50px;\r\n  margin-right: 10px;\r\n`;\r\nconst Header = styled.div`\r\n  color: white;\r\n  background-color: #14243d;\r\n  padding: 40px 20px 100px 20px;\r\n  p {\r\n    font-size: 20px;\r\n  }\r\n`;\r\n\r\nconst StyledH1 = styled.h1`\r\n  margin: 10px 0px 0px 0px;\r\n  font-weight: 500;\r\n  display: flex;\r\n  align-items: center;\r\n`;\r\n\r\nconst Content = styled.div`\r\n  margin: -70px 0px 0px 0px;\r\n  background-color: white;\r\n  border-radius: 5px;\r\n  box-shadow: rgb(0 0 0 / 10%) 0px 4px 15px 0px,\r\n    rgb(0 0 0 / 10%) 0px 1px 2px 0px, rgb(32 43 57 / 50%) 0px -2px 0px 0px;\r\n  display: flex;\r\n  flex-direction: column;\r\n`;\r\n\r\nconst StyledDiv = styled.div`\r\n  padding: 15px 20px;\r\n  .replyNote {\r\n    color: gray;\r\n    margin: 0px 0px 5px 0px;\r\n  }\r\n  .replyTome {\r\n    font-weight: bold;\r\n  }\r\n  button {\r\n    border: none;\r\n    background-color: #763c1a;\r\n    color: white;\r\n    padding: 15px 20px;\r\n    border-radius: 30px;\r\n    font-weight: 600;\r\n    font-size: 16px;\r\n    cursor: pointer;\r\n    width: 200px;\r\n    margin: 30px 0px 40px 0px;\r\n    transition: background-color 0.1s ease-in;\r\n    &:hover {\r\n      background-color: #bc6a39;\r\n    }\r\n  }\r\n`;\r\n","import React from \"react\";\nimport Bot from \"./components/Bot\";\nimport { DataContext } from \"./contexts/dataContext\";\n\nconst App = () => {\n  return (\n    <DataContext>\n      <Bot />\n    </DataContext>\n  );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nimport \"./App.css\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}
{"version":3,"sources":["components/Home.js","images/english.png","images/left-arrow.png","components/Header.js","images/send.png","images/bot-icon.png","components/Typing.js","components/MessageWithButton.js","components/botsComponents/styles.js","components/botsComponents/const.js","components/botsComponents/FirstBot.js","components/botsComponents/SecondBot.js","components/botsComponents/ThirdBot.js","App.js","index.js"],"names":["bots","botName","botDescription","botLink","botItem","messagesItem","Bot","setActive","Content","StyledDiv","map","bot","StyledDetails","FlexDiv","to","StartedBtn","ResetBtn","onClick","localStorage","removeItem","styled","div","button","details","Header","active","HeaderDiv","StyledBackImg","src","leftArrow","alt","StyledH1","StyledBotImg","englishBot","h1","img","Typing","TypingDiv","DotesContainer","Dot","ul","typingAnimation","keyframes","li","MessageWithButton","buttons","text","onBtnClick","Card","StyledH3","StyledUl","btn","StyledLi","title","cuid","h3","StyledForm","form","StyledMessages","StyledBotDiv","StyledMeDiv","socket","io","feedbackCorrection","feedbackRight","endMessages","feedback_wrong","retry","after_retry","FirstBot","ref","useRef","useState","JSON","parse","getItem","questionNo","setQuestionNo","modelNo","flag","Math","floor","random","setModelNo","messages","setMessages","msg","setMsg","typing","setTyping","botMsg","setBotMsg","currentQuestionType","setCurrentQuestionType","useEffect","setItem","stringify","length","setTimeout","emit","on","message","last","from","off","checkResult","result","corrections","toLowerCase","replace","toLocaleLowerCase","type","console","log","current","addEventListener","event","target","currentTarget","scroll","top","scrollHeight","behavior","correct","find","index","botIcon","dangerouslySetInnerHTML","__html","onSubmit","e","preventDefault","response","_id","sendMsgSubmit","value","onChange","placeholder","send","SecondBot","ThirdBot","times","setTimes","App","Container","path","element","Home","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.80d89eff.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport styled from \"styled-components\";\r\n\r\nconst bots = [\r\n  {\r\n    botName: \"Bot 1\",\r\n    botDescription: \"It will correct your incorrect answers\",\r\n    botLink: \"/english-bot/bot1\",\r\n    botItem: \"bot1\",\r\n    messagesItem: \"messages1\",\r\n  },\r\n  {\r\n    botName: \"Bot 2\",\r\n    botDescription: \"It won't correct your incorrect answers\",\r\n    botLink: \"/english-bot/bot2\",\r\n    botItem: \"bot2\",\r\n    messagesItem: \"messages2\",\r\n  },\r\n  {\r\n    botName: \"Bot 3\",\r\n    botDescription: \"It will correct your incorrect answers after three tries\",\r\n    botLink: \"/english-bot/bot3\",\r\n    botItem: \"bot3\",\r\n    messagesItem: \"messages3\",\r\n  },\r\n];\r\n\r\nconst Bot = ({ setActive }) => {\r\n  return (\r\n    <Content>\r\n      <>\r\n        <StyledDiv>\r\n          <h3>Get Started With One Of The Bots 👇</h3>\r\n          {/* <div>\r\n            <span className=\"replyNote\">The bot usual reply time</span>\r\n            <br />\r\n            <span className=\"replyTome\">🕓 Under 1 min</span>\r\n          </div> */}\r\n\r\n          {bots.map((bot) => (\r\n            <StyledDetails>\r\n              <summary>{bot.botName}</summary>\r\n              <p>\r\n                {bot.botDescription} , If you want to finish your previous\r\n                attempt, click complete, or if you want to start over, click\r\n                start.\r\n              </p>\r\n              <FlexDiv>\r\n                <Link to={bot.botLink}>\r\n                  <StartedBtn>Complete</StartedBtn>\r\n                </Link>\r\n                <Link to={bot.botLink}>\r\n                  <ResetBtn\r\n                    onClick={() => {\r\n                      localStorage.removeItem(bot.botItem);\r\n                      localStorage.removeItem(bot.messagesItem);\r\n                    }}\r\n                  >\r\n                    Start\r\n                  </ResetBtn>\r\n                </Link>\r\n              </FlexDiv>\r\n            </StyledDetails>\r\n          ))}\r\n        </StyledDiv>\r\n      </>\r\n    </Content>\r\n  );\r\n};\r\n\r\nexport default Bot;\r\n\r\n//styles\r\n\r\nconst Content = styled.div`\r\n  margin: -70px 0px 0px 0px;\r\n  background-color: white;\r\n  border-radius: 5px;\r\n  box-shadow: rgb(0 0 0 / 10%) 0px 4px 15px 0px,\r\n    rgb(0 0 0 / 10%) 0px 1px 2px 0px, rgb(32 43 57 / 50%) 0px -2px 0px 0px;\r\n  display: flex;\r\n  flex-direction: column;\r\n`;\r\n\r\nconst StyledDiv = styled.div`\r\n  padding: 15px 20px;\r\n  .replyNote {\r\n    color: gray;\r\n    margin: 0px 0px 5px 0px;\r\n  }\r\n  .replyTome {\r\n    font-weight: bold;\r\n  }\r\n`;\r\n\r\nconst FlexDiv = styled.div`\r\n  display: flex;\r\n`;\r\n\r\nconst StartedBtn = styled.button`\r\n  border: none;\r\n  background-color: #0695d5;\r\n  color: white;\r\n  padding: 10px 20px;\r\n  border-radius: 12px;\r\n  font-weight: 600;\r\n  font-size: 16px;\r\n  cursor: pointer;\r\n  margin: 10px 10px 10px 25px;\r\n  transition: background-color 0.1s ease-in;\r\n  &:hover {\r\n    background-color: #04638d;\r\n  }\r\n`;\r\n\r\nconst ResetBtn = styled.button`\r\n  border: none;\r\n  background-color: #a9b1b5;\r\n  color: white;\r\n  padding: 10px 20px;\r\n  border-radius: 12px;\r\n  font-weight: 600;\r\n  font-size: 16px;\r\n  cursor: pointer;\r\n  margin: 10px 0px;\r\n  transition: background-color 0.1s ease-in;\r\n  &:hover {\r\n    background-color: #7f8385;\r\n  }\r\n`;\r\n\r\nconst StyledDetails = styled.details`\r\n  summary::before {\r\n    content: \"▶️  \";\r\n  }\r\n  &[open] {\r\n    summary::before {\r\n      content: \"🔽  \";\r\n    }\r\n  }\r\n  summary {\r\n    cursor: pointer;\r\n    list-style: none;\r\n    font-weight: bold;\r\n    margin-bottom: 15px;\r\n  }\r\n  p {\r\n    margin: 0px 0px 0px 25px;\r\n    color: gray;\r\n    width: 50%;\r\n  }\r\n`;\r\n","export default __webpack_public_path__ + \"static/media/english.9c170a25.png\";","export default __webpack_public_path__ + \"static/media/left-arrow.903af5d7.png\";","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport styled from \"styled-components\";\r\nimport englishBot from \"../images/english.png\";\r\nimport leftArrow from \"../images/left-arrow.png\";\r\n\r\nconst Header = ({ active, setActive }) => {\r\n  return (\r\n    <HeaderDiv>\r\n      <>\r\n        {active && (\r\n          <Link to=\"/english-bot\" onClick={() => setActive(false)}>\r\n            <StyledBackImg src={leftArrow} alt=\"\" />\r\n          </Link>\r\n        )}\r\n\r\n        <StyledH1>\r\n          <StyledBotImg src={englishBot} alt=\"\" />\r\n          <span> English Bot </span>\r\n        </StyledH1>\r\n        <p>I can help you to improve your english.</p>\r\n      </>\r\n    </HeaderDiv>\r\n  );\r\n};\r\n\r\nexport default Header;\r\n\r\nconst StyledH1 = styled.h1`\r\n  margin: 10px 0px 0px 0px;\r\n  font-weight: 500;\r\n  display: flex;\r\n  align-items: center;\r\n`;\r\nconst StyledBackImg = styled.img`\r\n  width: 20px;\r\n  height: 20px;\r\n  margin: 0px 10px 20px 0px;\r\n  cursor: pointer;\r\n`;\r\nconst StyledBotImg = styled.img`\r\n  width: 50px;\r\n  height: 50px;\r\n  margin-right: 10px;\r\n`;\r\n\r\nconst HeaderDiv = styled.div`\r\n  color: white;\r\n  background-color: #14243d;\r\n  padding: 40px 20px 100px 20px;\r\n  p {\r\n    font-size: 20px;\r\n  }\r\n`;\r\n","export default __webpack_public_path__ + \"static/media/send.01c24b89.png\";","export default __webpack_public_path__ + \"static/media/bot-icon.cfbb308b.png\";","import React from \"react\";\r\nimport styled, { keyframes } from \"styled-components\";\r\n\r\nconst Typing = () => {\r\n  return (\r\n    <TypingDiv>\r\n      <DotesContainer>\r\n        <Dot />\r\n        <Dot />\r\n        <Dot />\r\n      </DotesContainer>\r\n    </TypingDiv>\r\n  );\r\n};\r\n\r\nexport default Typing;\r\n\r\nconst TypingDiv = styled.div`\r\n  background-color: #717171;\r\n  padding: 15px 20px;\r\n  border-radius: 20px;\r\n  border-bottom-left-radius: 2px;\r\n  width: fit-content;\r\n  margin: 0px 0px 20px 20px;\r\n`;\r\n\r\nconst DotesContainer = styled.ul`\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  list-style: none;\r\n  height: 17px;\r\n  padding: 0px;\r\n  margin: 0px;\r\n`;\r\n\r\nconst typingAnimation = keyframes`\r\n 0% {\r\n    transform: translateY(0px);\r\n    background-color:white;\r\n  }\r\n  28% {\r\n    transform: translateY(-7px);\r\n    background-color:#d9d8d8;\r\n  }\r\n  44% {\r\n    transform: translateY(0px);\r\n    background-color:#bbbaba;\r\n  }\r\n`;\r\n\r\nconst Dot = styled.li`\r\n  background-color: white;\r\n  border-radius: 50%;\r\n  height: 7px;\r\n  margin-right: 4px;\r\n  vertical-align: middle;\r\n  width: 7px;\r\n  &:nth-child(1) {\r\n    animation-delay: 200ms;\r\n  }\r\n  &:nth-child(2) {\r\n    animation-delay: 300ms;\r\n  }\r\n  &:nth-child(3) {\r\n    animation-delay: 400ms;\r\n  }\r\n  animation: ${typingAnimation} 1.8s infinite ease-in-out;\r\n`;\r\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport cuid from \"cuid\";\n\nfunction MessageWithButton({ buttons, text, onBtnClick }) {\n  return (\n    <Card>\n      <StyledH3>{text}</StyledH3>\n      <StyledUl>\n        {buttons?.map((btn) => (\n          <StyledLi\n            onClick={() => {\n              onBtnClick(btn);\n            }}\n            key={cuid()}\n          >\n            {btn?.title}\n          </StyledLi>\n        ))}\n      </StyledUl>\n    </Card>\n  );\n}\n\nexport default MessageWithButton;\n\nconst Card = styled.div`\n  max-width: 300px;\n  text-align: center;\n`;\nconst StyledH3 = styled.h3`\n  margin: 0px;\n  /* background-color: #9b9b9b; */\n  background-color: #0073a5;\n  padding: 20px 0px;\n  border-top-left-radius: 20px;\n  border-top-right-radius: 20px;\n  color: white;\n  border: 1px solid #f0f0f0;\n`;\nconst StyledUl = styled.ul`\n  padding: 0px;\n  list-style: none;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  margin: 0px;\n  border: 1px solid #f0f0f0;\n  border-bottom-left-radius: 20px;\n  border-bottom-right-radius: 20px;\n`;\nconst StyledLi = styled.li`\n  border-bottom: 1px solid #f0f0f0;\n  width: 100%;\n  padding: 10px 0px;\n  color: #9b9b9b;\n  cursor: pointer;\n  &:hover {\n    color: #0073a5;\n  }\n  &:last-child {\n    border-bottom: none;\n  }\n`;\n","import styled from \"styled-components\";\r\n\r\nexport const Content = styled.div`\r\n  margin: -70px 0px 0px 0px;\r\n  background-color: white;\r\n  border-radius: 5px;\r\n  box-shadow: rgb(0 0 0 / 10%) 0px 4px 15px 0px,\r\n    rgb(0 0 0 / 10%) 0px 1px 2px 0px, rgb(32 43 57 / 50%) 0px -2px 0px 0px;\r\n  display: flex;\r\n  flex-direction: column;\r\n`;\r\n\r\nexport const StyledForm = styled.form`\r\n  display: flex;\r\n  width: 100%;\r\n  border-top: 1px solid rgb(230, 230, 230);\r\n  input {\r\n    border: none;\r\n    height: 40px;\r\n    width: 80%;\r\n    padding: 10px 20px;\r\n    outline: 0;\r\n  }\r\n  button {\r\n    border: none;\r\n    background-color: white;\r\n    width: 18%;\r\n    display: flex;\r\n    justify-content: end;\r\n    align-items: center;\r\n    img {\r\n      width: 32px;\r\n      height: 32px;\r\n    }\r\n  }\r\n`;\r\n\r\nexport const StyledMessages = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  max-height: 400px;\r\n  min-height: 400px;\r\n  background: white;\r\n  overflow-y: auto;\r\n  padding: 15px 20px;\r\n  span {\r\n    width: fit-content;\r\n    height: fit-content;\r\n    border-top-left-radius: 10px;\r\n    border-top-right-radius: 10px;\r\n    border-bottom-right-radius: 10px;\r\n    margin-bottom: 10px;\r\n  }\r\n`;\r\n\r\nexport const StyledBotDiv = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  span {\r\n    background-color: #9b9b9b;\r\n    color: white;\r\n    padding: 10px;\r\n  }\r\n  img {\r\n    width: 40px;\r\n    height: 40px;\r\n    margin-right: 10px;\r\n  }\r\n`;\r\n\r\nexport const StyledMeDiv = styled.div`\r\n  margin-left: auto;\r\n  span {\r\n    display: block;\r\n    background-color: #0073a5;\r\n    color: white;\r\n    margin-left: 10px;\r\n    padding: 10px;\r\n  }\r\n`;\r\n","import { io } from \"socket.io-client\";\r\n\r\nexport const socket = io(\"wss://english-bot-test.herokuapp.com/\");\r\n\r\n// eslint-disable-next-line no-sparse-arrays\r\nexport const feedbackCorrection = [\r\n  \"You are too close , but the write answer is {ANSWER}\",\r\n  \"The correct answer is {ANSWER}\",\r\n  \"{ANSWER} this is the correct\",\r\n  \" Oh sorry , the write answer is {ANSWER}\",\r\n];\r\n\r\nexport const feedbackRight = [\r\n  \"You are right 🤩\",\r\n  \"you are too good\",\r\n  \"great 👏\",\r\n  \"Nice 😁😁\",\r\n  \"You are right ✅ \",\r\n];\r\n\r\nexport const endMessages = [\r\n  \"Happy end\",\r\n  \"See you later🙋‍♀️\",\r\n  \" Peace out🥳\",\r\n  \" It was nice to see you again🙋‍♀️\",\r\n  \"Take care\",\r\n  \"I look forward to our next dialogue\",\r\n  \"Good bye\",\r\n  \"Bye bye!👋\",\r\n  \"Have a nice day\",\r\n  \"Goodnight\",\r\n  \"I’m out of here\",\r\n  \"🥳\",\r\n];\r\n\r\nexport const feedback_wrong = [\r\n  \"You are wrong ☺️\",\r\n  \"false ☺️\",\r\n  \"Incorrect answer\",\r\n  \"Sorry , wrong ☺️\",\r\n  \"bad 🥳😔🤬\",\r\n  \"That’s wrong answer 🥳😔🤬\",\r\n  \"Sad\",\r\n];\r\n\r\nexport const retry = [\r\n  \"Please think again\",\r\n  \"Try again \",\r\n  \"Repeat your answer \",\r\n  \"Please retry again 😵 \",\r\n  \"Sorry, Retry\",\r\n  \"😵\",\r\n];\r\n\r\nexport const after_retry = [\r\n  \"Go to study again\",\r\n  \"ask your teacher 🧑‍🏫\",\r\n  \"Ask your teacher for tips & tricks 🧑‍🏫\",\r\n  \"ask your tutor 🧑‍🏫\",\r\n  \"Bad luck\",\r\n  \" go to our website and study again\",\r\n  \"Revise your lessons\",\r\n  \"Looking back to your lesson\",\r\n  \"You should revise your lessons ✍️\",\r\n  \"reflect your daily instructional activities ✍️\",\r\n];\r\n","import React, { useState, useEffect, useRef } from \"react\";\r\nimport send from \"../../images/send.png\";\r\nimport botIcon from \"../../images/bot-icon.png\";\r\nimport Typing from \"../Typing\";\r\nimport MessageWithButton from \"../MessageWithButton\";\r\nimport cuid from \"cuid\";\r\nimport {\r\n  Content,\r\n  StyledForm,\r\n  StyledMessages,\r\n  StyledBotDiv,\r\n  StyledMeDiv,\r\n} from \"./styles\";\r\nimport {\r\n  socket,\r\n  feedbackCorrection,\r\n  feedbackRight,\r\n  endMessages,\r\n} from \"./const\";\r\n\r\nconst FirstBot = ({ setActive }) => {\r\n  const ref = useRef();\r\n\r\n  const [questionNo, setQuestionNo] = useState(\r\n    JSON.parse(localStorage.getItem(\"bot1\"))?.questionNo || 0\r\n  );\r\n  const [modelNo, setModelNo] = useState(\r\n    JSON.parse(localStorage.getItem(\"bot1\"))?.modelNo ??\r\n      (JSON.parse(localStorage.getItem(\"doneBefore1\"))?.flag\r\n        ? Math.floor(Math.random() * 3)\r\n        : 0)\r\n  );\r\n\r\n  const [messages, setMessages] = useState(\r\n    JSON.parse(localStorage.getItem(\"messages1\"))?.messages || []\r\n  );\r\n\r\n  const [msg, setMsg] = useState({ text: \"\" });\r\n\r\n  const [typing, setTyping] = useState(\r\n    JSON.parse(localStorage.getItem(\"bot1\"))?.typing ?? true\r\n  );\r\n  const [botMsg, setBotMsg] = useState(\r\n    JSON.parse(localStorage.getItem(\"bot1\"))?.botMsg || {}\r\n  );\r\n  const [currentQuestionType, setCurrentQuestionType] = useState(\r\n    JSON.parse(localStorage.getItem(\"bot1\"))?.currentQuestionType || \"intro\"\r\n  );\r\n  const scrollToBottom = () => {\r\n    ref.current.addEventListener(\"DOMNodeInserted\", (event) => {\r\n      const { currentTarget: target } = event;\r\n      target.scroll({ top: target.scrollHeight, behavior: \"smooth\" });\r\n    });\r\n  };\r\n\r\n  useEffect(() => {\r\n    localStorage.setItem(\r\n      \"bot1\",\r\n      JSON.stringify({\r\n        questionNo,\r\n        currentQuestionType,\r\n        botMsg,\r\n        typing,\r\n        modelNo,\r\n      })\r\n    );\r\n  }, [questionNo, currentQuestionType, botMsg, typing, modelNo]);\r\n\r\n  useEffect(() => {\r\n    localStorage.setItem(\"messages1\", JSON.stringify({ messages }));\r\n  }, [messages]);\r\n\r\n  useEffect(() => {\r\n    setActive(true);\r\n    if (messages.length === 0) {\r\n      setTimeout(() => {\r\n        socket.emit(\"getIntroQuestion\", { questionNo });\r\n        socket.on(\"responseIntroQuestion\", ({ message, last }) => {\r\n          setMessages([\r\n            ...messages,\r\n            { from: \"English BOT\", text: message.text },\r\n          ]);\r\n          if (!last) {\r\n            setQuestionNo(questionNo + 1);\r\n          }\r\n          setTyping(false);\r\n        });\r\n      }, 2000);\r\n    }\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (currentQuestionType === \"model\") {\r\n      socket.off(\"checkGrammerResult\");\r\n      socket.on(\"checkGrammerResult\", ({ message, result: checkResult }) => {\r\n        const { result, corrections } = checkResult;\r\n        if (\r\n          corrections?.length === 0 ||\r\n          message?.toLowerCase().replace(/\\ /g, \"\") ===\r\n            result?.toLocaleLowerCase().replace(/\\ /g, \"\")\r\n        ) {\r\n          setTyping(false);\r\n          setMessages([\r\n            ...messages,\r\n            {\r\n              from: \"English BOT\",\r\n              text: feedbackRight[\r\n                Math.floor(Math.random() * (feedbackRight.length - 1))\r\n              ],\r\n              type: message?.type,\r\n              buttons: message?.buttons,\r\n            },\r\n          ]);\r\n        } else {\r\n          setTyping(false);\r\n          setMessages([\r\n            ...messages,\r\n            {\r\n              from: \"English BOT\",\r\n              text: `\r\n              ${feedbackCorrection[\r\n                Math.floor(Math.random() * (feedbackCorrection.length - 1))\r\n              ].replace(\"{ANSWER}\", `<strong>${result}</strong>`)}\r\n              `,\r\n              type: message?.type,\r\n              buttons: message?.buttons,\r\n            },\r\n          ]);\r\n        }\r\n        if (!botMsg.last) {\r\n          socket.emit(\"getModelQuestion\", { questionNo, modelNo });\r\n        } else {\r\n          socket.emit(\"getEndQuestion\", {});\r\n        }\r\n      });\r\n    }\r\n\r\n    // close the older listener then open new one\r\n    socket.off(\"responseIntroQuestion\");\r\n    socket.off(\"responseModelQuestion\");\r\n\r\n    socket.on(\"responseIntroQuestion\", ({ message, last }) => {\r\n      setMessages([\r\n        ...messages,\r\n        {\r\n          from: \"English BOT\",\r\n          text: message.text,\r\n          type: message?.type,\r\n          buttons: message?.buttons,\r\n        },\r\n      ]);\r\n      setBotMsg({ message, last });\r\n      if (!last) {\r\n        setQuestionNo(questionNo + 1);\r\n      }\r\n      setTyping(false);\r\n    });\r\n\r\n    socket.on(\"responseModelQuestion\", ({ message, last }) => {\r\n      setMessages([\r\n        ...messages,\r\n        {\r\n          from: \"English BOT\",\r\n          text: message?.text,\r\n          type: message?.type,\r\n          buttons: message?.buttons,\r\n        },\r\n      ]);\r\n      setBotMsg({ message, last });\r\n      if (!last) {\r\n        setQuestionNo(questionNo + 1);\r\n      } else {\r\n        if (\r\n          !JSON.parse(localStorage.getItem(\"doneBefore1\"))?.flag &&\r\n          modelNo < 2\r\n        ) {\r\n          setModelNo(modelNo + 1);\r\n          setQuestionNo(0);\r\n        } else if (\r\n          !JSON.parse(localStorage.getItem(\"doneBefore1\"))?.flag &&\r\n          modelNo === 2 &&\r\n          botMsg.last\r\n        ) {\r\n          console.log(\"ELSE IF \");\r\n          localStorage.setItem(\"doneBefore1\", JSON.stringify({ flag: true }));\r\n          setMessages([\r\n            ...messages,\r\n            {\r\n              from: \"English BOT\",\r\n              text: endMessages[\r\n                Math.floor(Math.random() * (endMessages.length - 1))\r\n              ],\r\n            },\r\n          ]);\r\n          setCurrentQuestionType(\"end\");\r\n        } else {\r\n          console.log(\"ELSEEE\");\r\n          setMessages([\r\n            ...messages,\r\n            {\r\n              from: \"English BOT\",\r\n              text: endMessages[\r\n                Math.floor(Math.random() * (endMessages.length - 1))\r\n              ],\r\n            },\r\n          ]);\r\n          setCurrentQuestionType(\"end\");\r\n        }\r\n      }\r\n\r\n      setTyping(false);\r\n    });\r\n    scrollToBottom();\r\n  }, [\r\n    messages,\r\n    questionNo,\r\n    msg.text,\r\n    currentQuestionType,\r\n    modelNo,\r\n    botMsg.last,\r\n  ]);\r\n\r\n  const sendMsgSubmit = (e) => {\r\n    e.preventDefault();\r\n    setMessages([...messages, { from: \"Me\", text: msg.text }]);\r\n    setTyping(true);\r\n    if (\r\n      botMsg?.message?.response?.length > 0 &&\r\n      currentQuestionType === \"intro\"\r\n    ) {\r\n      setTimeout(() => {\r\n        const response =\r\n          botMsg.message.response[\r\n            Math.floor(Math.random() * (botMsg.message.response.length - 1))\r\n          ];\r\n        setMessages([\r\n          ...messages,\r\n          { from: \"Me\", text: msg.text },\r\n          { from: \"English BOT\", text: response },\r\n        ]);\r\n        if (!botMsg.last) {\r\n          setTyping(true);\r\n          socket.emit(\"getIntroQuestion\", { questionNo });\r\n        } else {\r\n          setCurrentQuestionType(\"model\");\r\n          setQuestionNo(0);\r\n          setBotMsg({});\r\n          socket.emit(\"getModelQuestion\", { questionNo, modelNo });\r\n        }\r\n      }, 1000);\r\n    }\r\n    if (currentQuestionType === \"model\") {\r\n      socket.emit(\"checkGrammer\", { ...msg, _id: botMsg.message._id });\r\n      setBotMsg({});\r\n    }\r\n    setMsg({ text: \"\" });\r\n  };\r\n\r\n  const onBtnClick = (message) => {\r\n    setMessages([...messages, { from: \"Me\", text: message.title }]);\r\n    setTimeout(() => {\r\n      setTyping(false);\r\n      if (message.correct === true) {\r\n        setMessages([\r\n          ...messages,\r\n          { from: \"Me\", text: message.title },\r\n          {\r\n            from: \"English BOT\",\r\n            text: feedbackRight[\r\n              Math.floor(Math.random() * (feedbackRight.length - 1))\r\n            ],\r\n            type: message?.type,\r\n            buttons: message?.buttons,\r\n          },\r\n        ]);\r\n      } else {\r\n        const result = botMsg.message.buttons.find(\r\n          (btn) => btn.correct === true\r\n        )?.title;\r\n\r\n        setMessages([\r\n          ...messages,\r\n          { from: \"Me\", text: message.title },\r\n          {\r\n            from: \"English BOT\",\r\n            text: `\r\n            ${feedbackCorrection[\r\n              Math.floor(Math.random() * (feedbackCorrection.length - 1))\r\n            ].replace(\"{ANSWER}\", `<strong>${result}</strong>`)}\r\n            `,\r\n            type: message?.type,\r\n            buttons: message?.buttons,\r\n          },\r\n        ]);\r\n      }\r\n      if (!botMsg.last) {\r\n        socket.emit(\"getModelQuestion\", { questionNo, modelNo });\r\n      } else {\r\n        socket.emit(\"getEndQuestion\", {});\r\n      }\r\n    }, 1000);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Content>\r\n        <StyledMessages ref={ref}>\r\n          {messages.map(({ from, text, type, buttons }, index) => (\r\n            <>\r\n              {from === \"English BOT\" ? (\r\n                <StyledBotDiv key={cuid()}>\r\n                  <img src={botIcon} alt=\" \" />\r\n\r\n                  {type === \"@message-type/button\" ? (\r\n                    <MessageWithButton\r\n                      buttons={buttons}\r\n                      text={text}\r\n                      setMessages={setMessages}\r\n                      messages={messages}\r\n                      socket={socket}\r\n                      onBtnClick={onBtnClick}\r\n                    />\r\n                  ) : (\r\n                    <span\r\n                      dangerouslySetInnerHTML={{\r\n                        __html: `\r\n                    <style>\r\n                    strong{\r\n                      color: #74eaf4;\r\n                    }\r\n                    </style>\r\n                    <div>${text}</div>\r\n                    `,\r\n                      }}\r\n                    ></span>\r\n                  )}\r\n                </StyledBotDiv>\r\n              ) : (\r\n                <StyledMeDiv key={index}>\r\n                  <span>{text}</span>\r\n                </StyledMeDiv>\r\n              )}\r\n            </>\r\n          ))}\r\n        </StyledMessages>\r\n        {typing && <Typing />}\r\n        <StyledForm onSubmit={(e) => sendMsgSubmit(e)}>\r\n          <input\r\n            value={msg.text}\r\n            onChange={(e) => setMsg({ text: e.target.value })}\r\n            type=\"text\"\r\n            placeholder=\"send a message...\"\r\n          />\r\n          <button type=\"submit\">\r\n            <img src={send} alt=\"\" />\r\n          </button>\r\n        </StyledForm>\r\n      </Content>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default FirstBot;\r\n","import React, { useState, useEffect, useRef } from \"react\";\r\nimport send from \"../../images/send.png\";\r\nimport botIcon from \"../../images/bot-icon.png\";\r\nimport Typing from \"../Typing\";\r\nimport MessageWithButton from \"../MessageWithButton\";\r\nimport cuid from \"cuid\";\r\nimport {\r\n  Content,\r\n  StyledForm,\r\n  StyledMessages,\r\n  StyledBotDiv,\r\n  StyledMeDiv,\r\n} from \"./styles\";\r\nimport {\r\n  socket,\r\n  feedbackCorrection,\r\n  feedbackRight,\r\n  endMessages,\r\n  feedback_wrong,\r\n} from \"./const\";\r\n\r\nconst SecondBot = ({ setActive }) => {\r\n  const ref = useRef();\r\n\r\n  const [questionNo, setQuestionNo] = useState(\r\n    JSON.parse(localStorage.getItem(\"bot2\"))?.questionNo || 0\r\n  );\r\n  const [modelNo, setModelNo] = useState(\r\n    JSON.parse(localStorage.getItem(\"bot2\"))?.modelNo ??\r\n      (JSON.parse(localStorage.getItem(\"doneBefore2\"))?.flag\r\n        ? Math.floor(Math.random() * 3)\r\n        : 0)\r\n  );\r\n\r\n  const [messages, setMessages] = useState(\r\n    JSON.parse(localStorage.getItem(\"messages2\"))?.messages || []\r\n  );\r\n\r\n  const [msg, setMsg] = useState({ text: \"\" });\r\n\r\n  const [typing, setTyping] = useState(\r\n    JSON.parse(localStorage.getItem(\"bot2\"))?.typing ?? true\r\n  );\r\n  const [botMsg, setBotMsg] = useState(\r\n    JSON.parse(localStorage.getItem(\"bot2\"))?.botMsg || {}\r\n  );\r\n  const [currentQuestionType, setCurrentQuestionType] = useState(\r\n    JSON.parse(localStorage.getItem(\"bot2\"))?.currentQuestionType || \"intro\"\r\n  );\r\n  const scrollToBottom = () => {\r\n    ref.current.addEventListener(\"DOMNodeInserted\", (event) => {\r\n      const { currentTarget: target } = event;\r\n      target.scroll({ top: target.scrollHeight, behavior: \"smooth\" });\r\n    });\r\n  };\r\n\r\n  useEffect(() => {\r\n    localStorage.setItem(\r\n      \"bot2\",\r\n      JSON.stringify({\r\n        questionNo,\r\n        currentQuestionType,\r\n        botMsg,\r\n        typing,\r\n        modelNo,\r\n      })\r\n    );\r\n  }, [questionNo, currentQuestionType, botMsg, typing, modelNo]);\r\n\r\n  useEffect(() => {\r\n    localStorage.setItem(\"messages2\", JSON.stringify({ messages }));\r\n  }, [messages]);\r\n\r\n  useEffect(() => {\r\n    setActive(true);\r\n    if (messages.length === 0) {\r\n      setTimeout(() => {\r\n        socket.emit(\"getIntroQuestion\", { questionNo });\r\n        socket.on(\"responseIntroQuestion\", ({ message, last }) => {\r\n          setMessages([\r\n            ...messages,\r\n            { from: \"English BOT\", text: message.text },\r\n          ]);\r\n          if (!last) {\r\n            setQuestionNo(questionNo + 1);\r\n          }\r\n          setTyping(false);\r\n        });\r\n      }, 2000);\r\n    }\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (currentQuestionType === \"model\") {\r\n      socket.off(\"checkGrammerResult\");\r\n      socket.on(\"checkGrammerResult\", ({ message, result: checkResult }) => {\r\n        const { result, corrections } = checkResult;\r\n        if (\r\n          corrections?.length === 0 ||\r\n          message?.toLowerCase().replace(/\\ /g, \"\") ===\r\n            result?.toLocaleLowerCase().replace(/\\ /g, \"\")\r\n        ) {\r\n          setTyping(false);\r\n          setMessages([\r\n            ...messages,\r\n            {\r\n              from: \"English BOT\",\r\n              text: feedbackRight[\r\n                Math.floor(Math.random() * (feedbackRight.length - 1))\r\n              ],\r\n              type: message?.type,\r\n              buttons: message?.buttons,\r\n            },\r\n          ]);\r\n        } else {\r\n          setTyping(false);\r\n          setMessages([\r\n            ...messages,\r\n            {\r\n              from: \"English BOT\",\r\n              text: feedback_wrong[\r\n                Math.floor(Math.random() * (feedback_wrong.length - 1))\r\n              ],\r\n              type: message?.type,\r\n              buttons: message?.buttons,\r\n            },\r\n          ]);\r\n        }\r\n        if (!botMsg.last) {\r\n          socket.emit(\"getModelQuestion\", { questionNo, modelNo });\r\n        } else {\r\n          socket.emit(\"getEndQuestion\", {});\r\n        }\r\n      });\r\n    }\r\n\r\n    // close the older listener then open new one\r\n    socket.off(\"responseIntroQuestion\");\r\n    socket.off(\"responseModelQuestion\");\r\n\r\n    socket.on(\"responseIntroQuestion\", ({ message, last }) => {\r\n      setMessages([\r\n        ...messages,\r\n        {\r\n          from: \"English BOT\",\r\n          text: message.text,\r\n          type: message?.type,\r\n          buttons: message?.buttons,\r\n        },\r\n      ]);\r\n      setBotMsg({ message, last });\r\n      if (!last) {\r\n        setQuestionNo(questionNo + 1);\r\n      }\r\n      setTyping(false);\r\n    });\r\n\r\n    socket.on(\"responseModelQuestion\", ({ message, last }) => {\r\n      setMessages([\r\n        ...messages,\r\n        {\r\n          from: \"English BOT\",\r\n          text: message?.text,\r\n          type: message?.type,\r\n          buttons: message?.buttons,\r\n        },\r\n      ]);\r\n      setBotMsg({ message, last });\r\n      if (!last) {\r\n        setQuestionNo(questionNo + 1);\r\n      } else {\r\n        if (\r\n          !JSON.parse(localStorage.getItem(\"doneBefore2\"))?.flag &&\r\n          modelNo < 2\r\n        ) {\r\n          setModelNo(modelNo + 1);\r\n          setQuestionNo(0);\r\n        } else if (\r\n          !JSON.parse(localStorage.getItem(\"doneBefore2\"))?.flag &&\r\n          modelNo === 2 &&\r\n          botMsg.last\r\n        ) {\r\n          console.log(\"ELSE IF \");\r\n          localStorage.setItem(\"doneBefore2\", JSON.stringify({ flag: true }));\r\n          setMessages([\r\n            ...messages,\r\n            {\r\n              from: \"English BOT\",\r\n              text: endMessages[\r\n                Math.floor(Math.random() * (endMessages.length - 1))\r\n              ],\r\n            },\r\n          ]);\r\n          setCurrentQuestionType(\"end\");\r\n        } else {\r\n          console.log(\"ELSEEE\");\r\n          setMessages([\r\n            ...messages,\r\n            {\r\n              from: \"English BOT\",\r\n              text: endMessages[\r\n                Math.floor(Math.random() * (endMessages.length - 1))\r\n              ],\r\n            },\r\n          ]);\r\n          setCurrentQuestionType(\"end\");\r\n        }\r\n      }\r\n\r\n      setTyping(false);\r\n    });\r\n    scrollToBottom();\r\n  }, [\r\n    messages,\r\n    questionNo,\r\n    msg.text,\r\n    currentQuestionType,\r\n    modelNo,\r\n    botMsg.last,\r\n  ]);\r\n\r\n  const sendMsgSubmit = (e) => {\r\n    e.preventDefault();\r\n    setMessages([...messages, { from: \"Me\", text: msg.text }]);\r\n    setTyping(true);\r\n    if (\r\n      botMsg?.message?.response?.length > 0 &&\r\n      currentQuestionType === \"intro\"\r\n    ) {\r\n      setTimeout(() => {\r\n        const response =\r\n          botMsg.message.response[\r\n            Math.floor(Math.random() * (botMsg.message.response.length - 1))\r\n          ];\r\n        setMessages([\r\n          ...messages,\r\n          { from: \"Me\", text: msg.text },\r\n          { from: \"English BOT\", text: response },\r\n        ]);\r\n        if (!botMsg.last) {\r\n          setTyping(true);\r\n          socket.emit(\"getIntroQuestion\", { questionNo });\r\n        } else {\r\n          setCurrentQuestionType(\"model\");\r\n          setQuestionNo(0);\r\n          setBotMsg({});\r\n          socket.emit(\"getModelQuestion\", { questionNo, modelNo });\r\n        }\r\n      }, 1000);\r\n    }\r\n    if (currentQuestionType === \"model\") {\r\n      socket.emit(\"checkGrammer\", { ...msg, _id: botMsg.message._id });\r\n      setBotMsg({});\r\n    }\r\n    setMsg({ text: \"\" });\r\n  };\r\n\r\n  const onBtnClick = (message) => {\r\n    setMessages([...messages, { from: \"Me\", text: message.title }]);\r\n    setTimeout(() => {\r\n      setTyping(false);\r\n      if (message.correct === true) {\r\n        setMessages([\r\n          ...messages,\r\n          { from: \"Me\", text: message.title },\r\n          {\r\n            from: \"English BOT\",\r\n            text: feedbackRight[\r\n              Math.floor(Math.random() * (feedbackRight.length - 1))\r\n            ],\r\n            type: message?.type,\r\n            buttons: message?.buttons,\r\n          },\r\n        ]);\r\n      } else {\r\n        const result = botMsg.message.buttons.find(\r\n          (btn) => btn.correct === true\r\n        )?.title;\r\n\r\n        setMessages([\r\n          ...messages,\r\n          { from: \"Me\", text: message.title },\r\n          {\r\n            from: \"English BOT\",\r\n            text: `\r\n            ${feedbackCorrection[\r\n              Math.floor(Math.random() * (feedbackCorrection.length - 1))\r\n            ].replace(\"{ANSWER}\", `<strong>${result}</strong>`)}\r\n            `,\r\n            type: message?.type,\r\n            buttons: message?.buttons,\r\n          },\r\n        ]);\r\n      }\r\n      if (!botMsg.last) {\r\n        socket.emit(\"getModelQuestion\", { questionNo, modelNo });\r\n      } else {\r\n        socket.emit(\"getEndQuestion\", {});\r\n      }\r\n    }, 1000);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Content>\r\n        <StyledMessages ref={ref}>\r\n          {messages.map(({ from, text, type, buttons }, index) => (\r\n            <>\r\n              {from === \"English BOT\" ? (\r\n                <StyledBotDiv key={cuid()}>\r\n                  <img src={botIcon} alt=\" \" />\r\n\r\n                  {type === \"@message-type/button\" ? (\r\n                    <MessageWithButton\r\n                      buttons={buttons}\r\n                      text={text}\r\n                      setMessages={setMessages}\r\n                      messages={messages}\r\n                      socket={socket}\r\n                      onBtnClick={onBtnClick}\r\n                    />\r\n                  ) : (\r\n                    <span\r\n                      dangerouslySetInnerHTML={{\r\n                        __html: `\r\n                    <style>\r\n                    strong{\r\n                      color: #74eaf4;\r\n                    }\r\n                    </style>\r\n                    <div>${text}</div>\r\n                    `,\r\n                      }}\r\n                    ></span>\r\n                  )}\r\n                </StyledBotDiv>\r\n              ) : (\r\n                <StyledMeDiv key={index}>\r\n                  <span>{text}</span>\r\n                </StyledMeDiv>\r\n              )}\r\n            </>\r\n          ))}\r\n        </StyledMessages>\r\n        {typing && <Typing />}\r\n        <StyledForm onSubmit={(e) => sendMsgSubmit(e)}>\r\n          <input\r\n            value={msg.text}\r\n            onChange={(e) => setMsg({ text: e.target.value })}\r\n            type=\"text\"\r\n            placeholder=\"send a message...\"\r\n          />\r\n          <button type=\"submit\">\r\n            <img src={send} alt=\"\" />\r\n          </button>\r\n        </StyledForm>\r\n      </Content>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default SecondBot;\r\n","import React, { useState, useEffect, useRef } from \"react\";\r\nimport send from \"../../images/send.png\";\r\nimport botIcon from \"../../images/bot-icon.png\";\r\nimport Typing from \"../Typing\";\r\nimport MessageWithButton from \"../MessageWithButton\";\r\nimport cuid from \"cuid\";\r\nimport {\r\n  Content,\r\n  StyledForm,\r\n  StyledMessages,\r\n  StyledBotDiv,\r\n  StyledMeDiv,\r\n} from \"./styles\";\r\nimport {\r\n  socket,\r\n  feedbackCorrection,\r\n  feedbackRight,\r\n  endMessages,\r\n  retry,\r\n  after_retry,\r\n} from \"./const\";\r\n\r\nconst ThirdBot = ({ setActive }) => {\r\n  const ref = useRef();\r\n\r\n  const [times, setTimes] = useState(0);\r\n  const [questionNo, setQuestionNo] = useState(\r\n    JSON.parse(localStorage.getItem(\"bot3\"))?.questionNo || 0\r\n  );\r\n  const [modelNo, setModelNo] = useState(\r\n    JSON.parse(localStorage.getItem(\"bot3\"))?.modelNo ??\r\n      (JSON.parse(localStorage.getItem(\"doneBefore3\"))?.flag\r\n        ? Math.floor(Math.random() * 3)\r\n        : 0)\r\n  );\r\n\r\n  const [messages, setMessages] = useState(\r\n    JSON.parse(localStorage.getItem(\"messages3\"))?.messages || []\r\n  );\r\n\r\n  const [msg, setMsg] = useState({ text: \"\" });\r\n\r\n  const [typing, setTyping] = useState(\r\n    JSON.parse(localStorage.getItem(\"bot3\"))?.typing ?? true\r\n  );\r\n  const [botMsg, setBotMsg] = useState(\r\n    JSON.parse(localStorage.getItem(\"bot3\"))?.botMsg || {}\r\n  );\r\n  const [currentQuestionType, setCurrentQuestionType] = useState(\r\n    JSON.parse(localStorage.getItem(\"bot3\"))?.currentQuestionType || \"intro\"\r\n  );\r\n  const scrollToBottom = () => {\r\n    ref.current.addEventListener(\"DOMNodeInserted\", (event) => {\r\n      const { currentTarget: target } = event;\r\n      target.scroll({ top: target.scrollHeight, behavior: \"smooth\" });\r\n    });\r\n  };\r\n\r\n  useEffect(() => {\r\n    localStorage.setItem(\r\n      \"bot3\",\r\n      JSON.stringify({\r\n        questionNo,\r\n        currentQuestionType,\r\n        botMsg,\r\n        typing,\r\n        modelNo,\r\n      })\r\n    );\r\n  }, [questionNo, currentQuestionType, botMsg, typing, modelNo]);\r\n\r\n  useEffect(() => {\r\n    localStorage.setItem(\"messages3\", JSON.stringify({ messages }));\r\n  }, [messages]);\r\n\r\n  useEffect(() => {\r\n    setActive(true);\r\n    if (messages.length === 0) {\r\n      setTimeout(() => {\r\n        socket.emit(\"getIntroQuestion\", { questionNo });\r\n        socket.on(\"responseIntroQuestion\", ({ message, last }) => {\r\n          setMessages([\r\n            ...messages,\r\n            { from: \"English BOT\", text: message.text },\r\n          ]);\r\n          if (!last) {\r\n            setQuestionNo(questionNo + 1);\r\n          }\r\n          setTyping(false);\r\n        });\r\n      }, 2000);\r\n    }\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (currentQuestionType === \"model\") {\r\n      socket.off(\"checkGrammerResult\");\r\n      socket.on(\"checkGrammerResult\", ({ message, result: checkResult }) => {\r\n        const { result, corrections } = checkResult;\r\n        if (\r\n          corrections?.length === 0 ||\r\n          message?.toLowerCase().replace(/\\ /g, \"\") ===\r\n            result?.toLocaleLowerCase().replace(/\\ /g, \"\")\r\n        ) {\r\n          setTyping(false);\r\n          setMessages([\r\n            ...messages,\r\n            {\r\n              from: \"English BOT\",\r\n              text: feedbackRight[\r\n                Math.floor(Math.random() * (feedbackRight.length - 1))\r\n              ],\r\n              type: message?.type,\r\n              buttons: message?.buttons,\r\n            },\r\n          ]);\r\n        } else {\r\n          setTimes(times + 1);\r\n          setTyping(false);\r\n          if (times >= 0 && times < 3) {\r\n            setMessages([\r\n              ...messages,\r\n              {\r\n                from: \"English BOT\",\r\n                text: retry[Math.floor(Math.random() * (retry.length - 1))],\r\n                type: message?.type,\r\n                buttons: message?.buttons,\r\n              },\r\n            ]);\r\n          } else if (times === 3) {\r\n            setMessages([\r\n              ...messages,\r\n              {\r\n                from: \"English BOT\",\r\n                text: after_retry[\r\n                  Math.floor(Math.random() * (after_retry.length - 1))\r\n                ],\r\n                type: message?.type,\r\n                buttons: message?.buttons,\r\n              },\r\n            ]);\r\n          } else {\r\n            setMessages([\r\n              ...messages,\r\n              {\r\n                from: \"English BOT\",\r\n                text: `\r\n                  ${feedbackCorrection[\r\n                    Math.floor(Math.random() * (feedbackCorrection.length - 1))\r\n                  ].replace(\"{ANSWER}\", `<strong>${result}</strong>`)}\r\n                  `,\r\n                type: message?.type,\r\n                buttons: message?.buttons,\r\n              },\r\n            ]);\r\n          }\r\n        }\r\n        if (!botMsg.last) {\r\n          socket.emit(\"getModelQuestion\", { questionNo, modelNo });\r\n        } else {\r\n          socket.emit(\"getEndQuestion\", {});\r\n        }\r\n      });\r\n    }\r\n\r\n    // close the older listener then open new one\r\n    socket.off(\"responseIntroQuestion\");\r\n    socket.off(\"responseModelQuestion\");\r\n\r\n    socket.on(\"responseIntroQuestion\", ({ message, last }) => {\r\n      setMessages([\r\n        ...messages,\r\n        {\r\n          from: \"English BOT\",\r\n          text: message.text,\r\n          type: message?.type,\r\n          buttons: message?.buttons,\r\n        },\r\n      ]);\r\n      setBotMsg({ message, last });\r\n      if (!last) {\r\n        setQuestionNo(questionNo + 1);\r\n      }\r\n      setTyping(false);\r\n    });\r\n\r\n    socket.on(\"responseModelQuestion\", ({ message, last }) => {\r\n      setMessages([\r\n        ...messages,\r\n        {\r\n          from: \"English BOT\",\r\n          text: message?.text,\r\n          type: message?.type,\r\n          buttons: message?.buttons,\r\n        },\r\n      ]);\r\n      setBotMsg({ message, last });\r\n      if (!last) {\r\n        if (times >= 0 && times < 4) {\r\n          setQuestionNo(questionNo);\r\n        } else {\r\n          setTimes(0);\r\n          setQuestionNo(questionNo + 1);\r\n        }\r\n      } else {\r\n        if (\r\n          !JSON.parse(localStorage.getItem(\"doneBefore3\"))?.flag &&\r\n          modelNo < 2\r\n        ) {\r\n          setModelNo(modelNo + 1);\r\n          setQuestionNo(0);\r\n        } else if (\r\n          !JSON.parse(localStorage.getItem(\"doneBefore3\"))?.flag &&\r\n          modelNo === 2 &&\r\n          botMsg.last\r\n        ) {\r\n          localStorage.setItem(\"doneBefore3\", JSON.stringify({ flag: true }));\r\n          setMessages([\r\n            ...messages,\r\n            {\r\n              from: \"English BOT\",\r\n              text: endMessages[\r\n                Math.floor(Math.random() * (endMessages.length - 1))\r\n              ],\r\n            },\r\n          ]);\r\n          setCurrentQuestionType(\"end\");\r\n        } else {\r\n          setMessages([\r\n            ...messages,\r\n            {\r\n              from: \"English BOT\",\r\n              text: endMessages[\r\n                Math.floor(Math.random() * (endMessages.length - 1))\r\n              ],\r\n            },\r\n          ]);\r\n          setCurrentQuestionType(\"end\");\r\n        }\r\n      }\r\n\r\n      setTyping(false);\r\n    });\r\n    scrollToBottom();\r\n  }, [\r\n    messages,\r\n    questionNo,\r\n    msg.text,\r\n    currentQuestionType,\r\n    modelNo,\r\n    botMsg.last,\r\n    times,\r\n  ]);\r\n\r\n  const sendMsgSubmit = (e) => {\r\n    e.preventDefault();\r\n    setMessages([...messages, { from: \"Me\", text: msg.text }]);\r\n    setTyping(true);\r\n    if (\r\n      botMsg?.message?.response?.length > 0 &&\r\n      currentQuestionType === \"intro\"\r\n    ) {\r\n      setTimeout(() => {\r\n        const response =\r\n          botMsg.message.response[\r\n            Math.floor(Math.random() * (botMsg.message.response.length - 1))\r\n          ];\r\n        setMessages([\r\n          ...messages,\r\n          { from: \"Me\", text: msg.text },\r\n          { from: \"English BOT\", text: response },\r\n        ]);\r\n        if (!botMsg.last) {\r\n          setTyping(true);\r\n          socket.emit(\"getIntroQuestion\", { questionNo });\r\n        } else {\r\n          setCurrentQuestionType(\"model\");\r\n          setQuestionNo(0);\r\n          setBotMsg({});\r\n          socket.emit(\"getModelQuestion\", { questionNo, modelNo });\r\n        }\r\n      }, 1000);\r\n    }\r\n    if (currentQuestionType === \"model\") {\r\n      socket.emit(\"checkGrammer\", { ...msg, _id: botMsg?.message?._id });\r\n      setBotMsg({});\r\n    }\r\n    setMsg({ text: \"\" });\r\n  };\r\n\r\n  const onBtnClick = (message) => {\r\n    setMessages([...messages, { from: \"Me\", text: message.title }]);\r\n    setTimeout(() => {\r\n      setTyping(false);\r\n      if (message.correct === true) {\r\n        setMessages([\r\n          ...messages,\r\n          { from: \"Me\", text: message.title },\r\n          {\r\n            from: \"English BOT\",\r\n            text: feedbackRight[\r\n              Math.floor(Math.random() * (feedbackRight.length - 1))\r\n            ],\r\n            type: message?.type,\r\n            buttons: message?.buttons,\r\n          },\r\n        ]);\r\n      } else {\r\n        const result = botMsg.message.buttons.find(\r\n          (btn) => btn.correct === true\r\n        )?.title;\r\n\r\n        setMessages([\r\n          ...messages,\r\n          { from: \"Me\", text: message.title },\r\n          {\r\n            from: \"English BOT\",\r\n            text: `\r\n            ${feedbackCorrection[\r\n              Math.floor(Math.random() * (feedbackCorrection.length - 1))\r\n            ].replace(\"{ANSWER}\", `<strong>${result}</strong>`)}\r\n            `,\r\n            type: message?.type,\r\n            buttons: message?.buttons,\r\n          },\r\n        ]);\r\n      }\r\n      if (!botMsg.last) {\r\n        socket.emit(\"getModelQuestion\", { questionNo, modelNo });\r\n      } else {\r\n        socket.emit(\"getEndQuestion\", {});\r\n      }\r\n    }, 1000);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Content>\r\n        <StyledMessages ref={ref}>\r\n          {messages.map(({ from, text, type, buttons }, index) => (\r\n            <>\r\n              {from === \"English BOT\" ? (\r\n                <StyledBotDiv key={cuid()}>\r\n                  <img src={botIcon} alt=\" \" />\r\n\r\n                  {type === \"@message-type/button\" ? (\r\n                    <MessageWithButton\r\n                      buttons={buttons}\r\n                      text={text}\r\n                      setMessages={setMessages}\r\n                      messages={messages}\r\n                      socket={socket}\r\n                      onBtnClick={onBtnClick}\r\n                    />\r\n                  ) : (\r\n                    <span\r\n                      dangerouslySetInnerHTML={{\r\n                        __html: `\r\n                    <style>\r\n                    strong{\r\n                      color: #74eaf4;\r\n                    }\r\n                    </style>\r\n                    <div>${text}</div>\r\n                    `,\r\n                      }}\r\n                    ></span>\r\n                  )}\r\n                </StyledBotDiv>\r\n              ) : (\r\n                <StyledMeDiv key={index}>\r\n                  <span>{text}</span>\r\n                </StyledMeDiv>\r\n              )}\r\n            </>\r\n          ))}\r\n        </StyledMessages>\r\n        {typing && <Typing />}\r\n        <StyledForm onSubmit={(e) => sendMsgSubmit(e)}>\r\n          <input\r\n            value={msg.text}\r\n            onChange={(e) => setMsg({ text: e.target.value })}\r\n            type=\"text\"\r\n            placeholder=\"send a message...\"\r\n          />\r\n          <button type=\"submit\">\r\n            <img src={send} alt=\"\" />\r\n          </button>\r\n        </StyledForm>\r\n      </Content>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ThirdBot;\r\n","import React, { useState } from \"react\";\nimport Home from \"./components/Home\";\nimport Header from \"./components/Header\";\nimport FirstBot from \"./components/botsComponents/FirstBot\";\nimport SecondBot from \"./components/botsComponents/SecondBot\";\nimport ThirdBot from \"./components/botsComponents/ThirdBot\";\nimport { Routes, Route } from \"react-router-dom\";\nimport styled from \"styled-components\";\n\nconst App = () => {\n  const [active, setActive] = useState(false);\n  return (\n    <>\n      <Header active={active} setActive={setActive} />\n      <Container>\n        <Routes>\n          <Route path=\"/english-bot\" element={<Home setActive={setActive} />} />\n          <Route\n            path=\"/english-bot/bot1\"\n            element={<FirstBot setActive={setActive} />}\n          />\n          <Route\n            path=\"/english-bot/bot2\"\n            element={<SecondBot setActive={setActive} />}\n          />\n          <Route\n            path=\"/english-bot/bot3\"\n            element={<ThirdBot setActive={setActive} />}\n          />\n        </Routes>\n      </Container>\n    </>\n  );\n};\n\nexport default App;\n\n//styles\nconst Container = styled.div`\n  padding: 0px 25px;\n`;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport App from \"./App\";\n\nimport \"./App.css\";\n\nReactDOM.render(\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}
{"version":3,"sources":["components/Home.js","images/english.png","images/left-arrow.png","components/Header.js","components/shared/Typing.js","components/shared/styles.js","images/bot-icon.png","components/shared/MessageWithButton.js","components/shared/const.js","components/firstBotComponents/MessagesContainer.js","images/send.png","components/shared/FormContainer.js","components/firstBotComponents/FirstBot.js","components/secondBotComponents/MessagesContainer.js","components/secondBotComponents/SecondBot.js","components/thirdBotComponents/MessagesContainer.js","components/thirdBotComponents/ThirdBot.js","App.js","index.js"],"names":["bots","botName","botDescription","botLink","botItem","messagesItem","Bot","setActive","Content","StyledDiv","map","bot","index","StyledDetails","FlexDiv","to","StartedBtn","ResetBtn","onClick","localStorage","removeItem","styled","div","button","details","Header","active","HeaderDiv","StyledBackImg","src","leftArrow","alt","StyledH1","StyledBotImg","englishBot","h1","img","Typing","TypingDiv","DotesContainer","Dot","ul","typingAnimation","keyframes","li","StyledForm","form","StyledMessages","StyledBotDiv","StyledMeDiv","MessageWithButton","buttons","text","onBtnClick","Card","StyledH3","StyledUl","btn","StyledLi","title","cuid","h3","socket","io","feedbackCorrection","feedbackRight","endMessages","feedback_wrong","retry","after_retry","MessagesContainer","questionNo","currentQuestionType","botMsg","modelNo","messages","setTyping","setQuestionNo","setMessages","setBotMsg","setModelNo","setCurrentQuestionType","ref","useRef","useEffect","setItem","JSON","stringify","length","from","Audio","play","current","addEventListener","event","target","currentTarget","scroll","top","scrollHeight","behavior","scrollToBottom","setTimeout","emit","on","message","last","off","checkResult","result","corrections","toLowerCase","replace","toLocaleLowerCase","Math","floor","random","type","parse","getItem","flag","correct","find","botIcon","dangerouslySetInnerHTML","__html","FormContainer","useState","msg","setMsg","onSubmit","e","preventDefault","response","_id","sendMsgSubmit","value","onChange","placeholder","send","FirstBot","typing","SecondBot","ThirdBot","times","setTimes","_messages","App","Container","path","element","Home","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.db296198.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport styled from \"styled-components\";\r\n\r\nconst bots = [\r\n  {\r\n    botName: \"Bot 1\",\r\n    botDescription: \"It will correct your incorrect answers\",\r\n    botLink: \"/english-bot/bot1\",\r\n    botItem: \"bot1\",\r\n    messagesItem: \"messages1\",\r\n  },\r\n  {\r\n    botName: \"Bot 2\",\r\n    botDescription: \"It won't correct your incorrect answers\",\r\n    botLink: \"/english-bot/bot2\",\r\n    botItem: \"bot2\",\r\n    messagesItem: \"messages2\",\r\n  },\r\n  {\r\n    botName: \"Bot 3\",\r\n    botDescription: \"It will correct your incorrect answers after three tries\",\r\n    botLink: \"/english-bot/bot3\",\r\n    botItem: \"bot3\",\r\n    messagesItem: \"messages3\",\r\n  },\r\n];\r\n\r\nconst Bot = ({ setActive }) => {\r\n  return (\r\n    <Content>\r\n      <>\r\n        <StyledDiv>\r\n          <h3>Get Started With One Of The Bots 👇</h3>\r\n          {/* <div>\r\n            <span className=\"replyNote\">The bot usual reply time</span>\r\n            <br />\r\n            <span className=\"replyTome\">🕓 Under 1 min</span>\r\n          </div> */}\r\n\r\n          {bots.map((bot, index) => (\r\n            <StyledDetails key={index}>\r\n              <summary>{bot.botName}</summary>\r\n              <p>\r\n                {bot.botDescription} , If you want to finish your previous\r\n                attempt, click complete, or if you want to start over, click\r\n                start.\r\n              </p>\r\n              <FlexDiv>\r\n                <Link to={bot.botLink}>\r\n                  <StartedBtn>Complete</StartedBtn>\r\n                </Link>\r\n                <Link to={bot.botLink}>\r\n                  <ResetBtn\r\n                    onClick={() => {\r\n                      localStorage.removeItem(bot.botItem);\r\n                      localStorage.removeItem(bot.messagesItem);\r\n                    }}\r\n                  >\r\n                    Start\r\n                  </ResetBtn>\r\n                </Link>\r\n              </FlexDiv>\r\n            </StyledDetails>\r\n          ))}\r\n        </StyledDiv>\r\n      </>\r\n    </Content>\r\n  );\r\n};\r\n\r\nexport default Bot;\r\n\r\n//styles\r\n\r\nconst Content = styled.div`\r\n  margin: -70px 0px 0px 0px;\r\n  background-color: white;\r\n  border-radius: 5px;\r\n  box-shadow: rgb(0 0 0 / 10%) 0px 4px 15px 0px,\r\n    rgb(0 0 0 / 10%) 0px 1px 2px 0px, rgb(32 43 57 / 50%) 0px -2px 0px 0px;\r\n  display: flex;\r\n  flex-direction: column;\r\n`;\r\n\r\nconst StyledDiv = styled.div`\r\n  padding: 15px 20px;\r\n  .replyNote {\r\n    color: gray;\r\n    margin: 0px 0px 5px 0px;\r\n  }\r\n  .replyTome {\r\n    font-weight: bold;\r\n  }\r\n`;\r\n\r\nconst FlexDiv = styled.div`\r\n  display: flex;\r\n`;\r\n\r\nconst StartedBtn = styled.button`\r\n  border: none;\r\n  background-color: #0695d5;\r\n  color: white;\r\n  padding: 10px 20px;\r\n  border-radius: 12px;\r\n  font-weight: 600;\r\n  font-size: 16px;\r\n  cursor: pointer;\r\n  margin: 10px 10px 10px 25px;\r\n  transition: background-color 0.1s ease-in;\r\n  &:hover {\r\n    background-color: #04638d;\r\n  }\r\n`;\r\n\r\nconst ResetBtn = styled.button`\r\n  border: none;\r\n  background-color: #a9b1b5;\r\n  color: white;\r\n  padding: 10px 20px;\r\n  border-radius: 12px;\r\n  font-weight: 600;\r\n  font-size: 16px;\r\n  cursor: pointer;\r\n  margin: 10px 0px;\r\n  transition: background-color 0.1s ease-in;\r\n  &:hover {\r\n    background-color: #7f8385;\r\n  }\r\n`;\r\n\r\nconst StyledDetails = styled.details`\r\n  summary::before {\r\n    content: \"▶️  \";\r\n  }\r\n  &[open] {\r\n    summary::before {\r\n      content: \"🔽  \";\r\n    }\r\n  }\r\n  summary {\r\n    cursor: pointer;\r\n    list-style: none;\r\n    font-weight: bold;\r\n    margin-bottom: 15px;\r\n  }\r\n  p {\r\n    margin: 0px 0px 0px 25px;\r\n    color: gray;\r\n    width: 50%;\r\n  }\r\n`;\r\n","export default __webpack_public_path__ + \"static/media/english.9c170a25.png\";","export default __webpack_public_path__ + \"static/media/left-arrow.903af5d7.png\";","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport styled from \"styled-components\";\r\nimport englishBot from \"../images/english.png\";\r\nimport leftArrow from \"../images/left-arrow.png\";\r\n\r\nconst Header = ({ active, setActive }) => {\r\n  return (\r\n    <HeaderDiv>\r\n      <>\r\n        {active && (\r\n          <Link to=\"/english-bot\" onClick={() => setActive(false)}>\r\n            <StyledBackImg src={leftArrow} alt=\"\" />\r\n          </Link>\r\n        )}\r\n\r\n        <StyledH1>\r\n          <StyledBotImg src={englishBot} alt=\"\" />\r\n          <span> English Bot </span>\r\n        </StyledH1>\r\n        <p>I can help you to improve your english.</p>\r\n      </>\r\n    </HeaderDiv>\r\n  );\r\n};\r\n\r\nexport default Header;\r\n\r\nconst StyledH1 = styled.h1`\r\n  margin: 10px 0px 0px 0px;\r\n  font-weight: 500;\r\n  display: flex;\r\n  align-items: center;\r\n`;\r\nconst StyledBackImg = styled.img`\r\n  width: 20px;\r\n  height: 20px;\r\n  margin: 0px 10px 20px 0px;\r\n  cursor: pointer;\r\n`;\r\nconst StyledBotImg = styled.img`\r\n  width: 50px;\r\n  height: 50px;\r\n  margin-right: 10px;\r\n`;\r\n\r\nconst HeaderDiv = styled.div`\r\n  color: white;\r\n  background-color: #14243d;\r\n  padding: 40px 20px 100px 20px;\r\n  p {\r\n    font-size: 20px;\r\n  }\r\n`;\r\n","import React from \"react\";\r\nimport styled, { keyframes } from \"styled-components\";\r\n\r\nconst Typing = () => {\r\n  return (\r\n    <TypingDiv>\r\n      <DotesContainer>\r\n        <Dot />\r\n        <Dot />\r\n        <Dot />\r\n      </DotesContainer>\r\n    </TypingDiv>\r\n  );\r\n};\r\n\r\nexport default Typing;\r\n\r\nconst TypingDiv = styled.div`\r\n  background-color: #717171;\r\n  padding: 15px 20px;\r\n  border-radius: 20px;\r\n  border-bottom-left-radius: 2px;\r\n  width: fit-content;\r\n  margin: 0px 0px 20px 20px;\r\n`;\r\n\r\nconst DotesContainer = styled.ul`\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  list-style: none;\r\n  height: 17px;\r\n  padding: 0px;\r\n  margin: 0px;\r\n`;\r\n\r\nconst typingAnimation = keyframes`\r\n 0% {\r\n    transform: translateY(0px);\r\n    background-color:white;\r\n  }\r\n  28% {\r\n    transform: translateY(-7px);\r\n    background-color:#d9d8d8;\r\n  }\r\n  44% {\r\n    transform: translateY(0px);\r\n    background-color:#bbbaba;\r\n  }\r\n`;\r\n\r\nconst Dot = styled.li`\r\n  background-color: white;\r\n  border-radius: 50%;\r\n  height: 7px;\r\n  margin-right: 4px;\r\n  vertical-align: middle;\r\n  width: 7px;\r\n  &:nth-child(1) {\r\n    animation-delay: 200ms;\r\n  }\r\n  &:nth-child(2) {\r\n    animation-delay: 300ms;\r\n  }\r\n  &:nth-child(3) {\r\n    animation-delay: 400ms;\r\n  }\r\n  animation: ${typingAnimation} 1.8s infinite ease-in-out;\r\n`;\r\n","import styled from \"styled-components\";\r\n\r\nexport const Content = styled.div`\r\n  margin: -70px 0px 0px 0px;\r\n  background-color: white;\r\n  border-radius: 5px;\r\n  box-shadow: rgb(0 0 0 / 10%) 0px 4px 15px 0px,\r\n    rgb(0 0 0 / 10%) 0px 1px 2px 0px, rgb(32 43 57 / 50%) 0px -2px 0px 0px;\r\n  display: flex;\r\n  flex-direction: column;\r\n`;\r\n\r\nexport const StyledForm = styled.form`\r\n  display: flex;\r\n  width: 100%;\r\n  border-top: 1px solid rgb(230, 230, 230);\r\n  input {\r\n    border: none;\r\n    height: 40px;\r\n    width: 80%;\r\n    padding: 10px 20px;\r\n    outline: 0;\r\n  }\r\n  button {\r\n    border: none;\r\n    background-color: white;\r\n    width: 18%;\r\n    display: flex;\r\n    justify-content: end;\r\n    align-items: center;\r\n    img {\r\n      width: 32px;\r\n      height: 32px;\r\n    }\r\n  }\r\n`;\r\n\r\nexport const StyledMessages = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  max-height: 400px;\r\n  min-height: 400px;\r\n  background: white;\r\n  overflow-y: auto;\r\n  padding: 15px 20px;\r\n  span {\r\n    width: fit-content;\r\n    height: fit-content;\r\n    border-top-left-radius: 10px;\r\n    border-top-right-radius: 10px;\r\n    border-bottom-right-radius: 10px;\r\n    margin-bottom: 10px;\r\n  }\r\n`;\r\n\r\nexport const StyledBotDiv = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  span {\r\n    background-color: #9b9b9b;\r\n    color: white;\r\n    padding: 10px;\r\n  }\r\n  img {\r\n    width: 40px;\r\n    height: 40px;\r\n    margin-right: 10px;\r\n  }\r\n`;\r\n\r\nexport const StyledMeDiv = styled.div`\r\n  margin-left: auto;\r\n  span {\r\n    display: block;\r\n    background-color: #0073a5;\r\n    color: white;\r\n    margin-left: 10px;\r\n    padding: 10px;\r\n  }\r\n`;\r\n","export default __webpack_public_path__ + \"static/media/bot-icon.cfbb308b.png\";","import React from \"react\";\nimport styled from \"styled-components\";\nimport cuid from \"cuid\";\n\nfunction MessageWithButton({ buttons, text, onBtnClick }) {\n  return (\n    <Card>\n      <StyledH3>{text}</StyledH3>\n      <StyledUl>\n        {buttons?.map((btn) => (\n          <StyledLi\n            onClick={() => {\n              onBtnClick(btn);\n            }}\n            key={cuid()}\n          >\n            {btn?.title}\n          </StyledLi>\n        ))}\n      </StyledUl>\n    </Card>\n  );\n}\n\nexport default MessageWithButton;\n\nconst Card = styled.div`\n  max-width: 300px;\n  text-align: center;\n`;\nconst StyledH3 = styled.h3`\n  margin: 0px;\n  background-color: #0073a5;\n  padding: 20px;\n  border-top-left-radius: 20px;\n  border-top-right-radius: 20px;\n  color: white;\n  border: 1px solid #f0f0f0;\n`;\nconst StyledUl = styled.ul`\n  padding: 0px;\n  list-style: none;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  margin: 0px;\n  border: 1px solid #f0f0f0;\n  border-bottom-left-radius: 20px;\n  border-bottom-right-radius: 20px;\n`;\nconst StyledLi = styled.li`\n  border-bottom: 1px solid #f0f0f0;\n  width: 100%;\n  padding: 10px 0px;\n  color: #9b9b9b;\n  cursor: pointer;\n  &:hover {\n    color: #0073a5;\n  }\n  &:last-child {\n    border-bottom: none;\n  }\n`;\n","import { io } from \"socket.io-client\";\r\n\r\nexport const socket = io(\"wss://english-bot-test.herokuapp.com/\");\r\n\r\n// eslint-disable-next-line no-sparse-arrays\r\nexport const feedbackCorrection = [\r\n  \"You are too close , but the right answer is {ANSWER}\",\r\n  \"The correct answer is {ANSWER}\",\r\n  \"{ANSWER} this is the correct\",\r\n  \" Oh sorry , the write answer is {ANSWER}\",\r\n];\r\n\r\nexport const feedbackRight = [\r\n  \"You are right 🤩\",\r\n  \"you are too good\",\r\n  \"great 👏\",\r\n  \"Nice 😁😁\",\r\n  \"You are right ✅ \",\r\n];\r\n\r\nexport const endMessages = [\r\n  \"Happy end\",\r\n  \"See you later🙋‍♀️\",\r\n  \" Peace out🥳\",\r\n  \" It was nice to see you again🙋‍♀️\",\r\n  \"Take care\",\r\n  \"I look forward to our next dialogue\",\r\n  \"Good bye 😇\",\r\n  \"Bye bye!👋\",\r\n  \"Have a nice day\",\r\n  \"Goodnight 😇\",\r\n  \"I’m out of here\",\r\n  \"🥳\",\r\n];\r\n\r\nexport const feedback_wrong = [\r\n  \"You are wrong ☹️\",\r\n  \"false ☹️ \",\r\n  \"Incorrect answer \",\r\n  \"Sorry , wrong 😡 \",\r\n  \"bad ☹️ \",\r\n  \"That’s wrong answer 😠 \",\r\n  \"Sad \",\r\n];\r\n\r\nexport const retry = [\r\n  \"Please think again\",\r\n  \"Try again \",\r\n  \"Repeat your answer \",\r\n  \"Please retry again 😵 \",\r\n  \"Sorry, Retry\",\r\n  \"😵\",\r\n];\r\n\r\nexport const after_retry = [\r\n  \"Go to study again\",\r\n  \"ask your teacher 🧑‍🏫\",\r\n  \"Ask your teacher for tips & tricks 🧑‍🏫\",\r\n  \"ask your tutor 🧑‍🏫\",\r\n  \"Bad luck\",\r\n  \" go to our website and study again\",\r\n  \"Revise your lessons\",\r\n  \"Looking back to your lesson\",\r\n  \"You should revise your lessons ✍️\",\r\n  \"reflect your daily instructional activities ✍️\",\r\n];\r\n","import React, { useEffect, useRef } from \"react\";\r\nimport botIcon from \"../../images/bot-icon.png\";\r\nimport MessageWithButton from \"../shared/MessageWithButton\";\r\nimport cuid from \"cuid\";\r\nimport { StyledMessages, StyledBotDiv, StyledMeDiv } from \"../shared/styles\";\r\nimport {\r\n  socket,\r\n  feedbackCorrection,\r\n  feedbackRight,\r\n  endMessages,\r\n} from \"../shared/const\";\r\n\r\nconst MessagesContainer = ({\r\n  questionNo,\r\n  currentQuestionType,\r\n  botMsg,\r\n  modelNo,\r\n  messages,\r\n  setTyping,\r\n  setQuestionNo,\r\n  setMessages,\r\n  setBotMsg,\r\n  setModelNo,\r\n  setCurrentQuestionType,\r\n}) => {\r\n  const ref = useRef();\r\n\r\n  const scrollToBottom = () => {\r\n    ref?.current?.addEventListener(\"DOMNodeInserted\", (event) => {\r\n      const { currentTarget: target } = event;\r\n      target.scroll({ top: target.scrollHeight, behavior: \"smooth\" });\r\n    });\r\n  };\r\n\r\n  useEffect(() => {\r\n    localStorage.setItem(\"messages1\", JSON.stringify({ messages }));\r\n    if (messages?.[messages.length - 1]?.from === \"English BOT\") {\r\n      const audio = new Audio(\r\n        \"https://english-bot-test.herokuapp.com/assets/elegant-notification-sound.mp3\"\r\n      );\r\n      audio.play();\r\n    }\r\n    scrollToBottom();\r\n  }, [messages]);\r\n\r\n  useEffect(() => {\r\n    if (messages.length === 0) {\r\n      setTimeout(() => {\r\n        socket.emit(\"getIntroQuestion\", { questionNo });\r\n        socket.on(\"responseIntroQuestion\", ({ message, last }) => {\r\n          setMessages([\r\n            ...messages,\r\n            { from: \"English BOT\", text: message.text },\r\n          ]);\r\n          if (!last) {\r\n            setQuestionNo(questionNo + 1);\r\n          }\r\n          setTyping(false);\r\n        });\r\n      }, 2000);\r\n    }\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (currentQuestionType === \"model\") {\r\n      socket.off(\"checkGrammerResult\");\r\n      socket.on(\"checkGrammerResult\", ({ message, result: checkResult }) => {\r\n        const { result, corrections } = checkResult;\r\n        if (\r\n          corrections?.length === 0 ||\r\n          message?.toLowerCase().replace(/\\ /g, \"\") ===\r\n            result?.toLocaleLowerCase().replace(/\\ /g, \"\")\r\n        ) {\r\n          setMessages([\r\n            ...messages,\r\n            {\r\n              from: \"English BOT\",\r\n              text: feedbackRight[\r\n                Math.floor(Math.random() * (feedbackRight.length - 1))\r\n              ],\r\n              type: message?.type,\r\n              buttons: message?.buttons,\r\n            },\r\n          ]);\r\n        } else {\r\n          setMessages([\r\n            ...messages,\r\n            {\r\n              from: \"English BOT\",\r\n              text: `\r\n              ${feedbackCorrection[\r\n                Math.floor(Math.random() * (feedbackCorrection.length - 1))\r\n              ].replace(\"{ANSWER}\", `<strong>${result}</strong>`)}\r\n              `,\r\n              type: message?.type,\r\n              buttons: message?.buttons,\r\n            },\r\n          ]);\r\n        }\r\n        if (!botMsg.last) {\r\n          setTyping(true);\r\n          socket.emit(\"getModelQuestion\", { questionNo, modelNo });\r\n        } else {\r\n          socket.emit(\"getEndQuestion\", {});\r\n        }\r\n      });\r\n    }\r\n\r\n    // close the older listener then open new one\r\n    socket.off(\"responseIntroQuestion\");\r\n    socket.off(\"responseModelQuestion\");\r\n\r\n    socket.on(\"responseIntroQuestion\", ({ message, last }) => {\r\n      setMessages([\r\n        ...messages,\r\n        {\r\n          from: \"English BOT\",\r\n          text: message.text,\r\n          type: message?.type,\r\n          buttons: message?.buttons,\r\n        },\r\n      ]);\r\n      setBotMsg({ message, last });\r\n      if (!last) {\r\n        setQuestionNo(questionNo + 1);\r\n      }\r\n      setTyping(false);\r\n    });\r\n\r\n    socket.on(\"responseModelQuestion\", ({ message, last }) => {\r\n      setMessages([\r\n        ...messages,\r\n        {\r\n          from: \"English BOT\",\r\n          text: message?.text,\r\n          type: message?.type,\r\n          buttons: message?.buttons,\r\n        },\r\n      ]);\r\n      setBotMsg({ message, last });\r\n      if (!last) {\r\n        setQuestionNo(questionNo + 1);\r\n      } else {\r\n        if (\r\n          !JSON.parse(localStorage.getItem(\"doneBefore1\"))?.flag &&\r\n          modelNo < 2\r\n        ) {\r\n          setModelNo(modelNo + 1);\r\n          setBotMsg({ ...botMsg, last: false });\r\n          setQuestionNo(0);\r\n        } else if (\r\n          !JSON.parse(localStorage.getItem(\"doneBefore1\"))?.flag &&\r\n          modelNo === 2 &&\r\n          botMsg.last\r\n        ) {\r\n          localStorage.setItem(\"doneBefore1\", JSON.stringify({ flag: true }));\r\n          setMessages([\r\n            ...messages,\r\n            {\r\n              from: \"English BOT\",\r\n              text: endMessages[\r\n                Math.floor(Math.random() * (endMessages.length - 1))\r\n              ],\r\n            },\r\n          ]);\r\n          setCurrentQuestionType(\"end\");\r\n          setTyping(false);\r\n        } else {\r\n          setMessages([\r\n            ...messages,\r\n            {\r\n              from: \"English BOT\",\r\n              text: endMessages[\r\n                Math.floor(Math.random() * (endMessages.length - 1))\r\n              ],\r\n            },\r\n          ]);\r\n          setCurrentQuestionType(\"end\");\r\n        }\r\n      }\r\n\r\n      setTyping(false);\r\n    });\r\n  }, [\r\n    messages,\r\n    questionNo,\r\n    currentQuestionType,\r\n    modelNo,\r\n    botMsg.last,\r\n    botMsg,\r\n    setMessages,\r\n    setTyping,\r\n    setBotMsg,\r\n    setQuestionNo,\r\n    setModelNo,\r\n    setCurrentQuestionType,\r\n  ]);\r\n\r\n  const onBtnClick = (message) => {\r\n    setMessages([...messages, { from: \"Me\", text: message.title }]);\r\n    setTyping(true);\r\n    setTimeout(() => {\r\n      setTyping(false);\r\n      if (message.correct === true) {\r\n        setMessages([\r\n          ...messages,\r\n          { from: \"Me\", text: message.title },\r\n          {\r\n            from: \"English BOT\",\r\n            text: feedbackRight[\r\n              Math.floor(Math.random() * (feedbackRight.length - 1))\r\n            ],\r\n            type: message?.type,\r\n            buttons: message?.buttons,\r\n          },\r\n        ]);\r\n      } else {\r\n        const result = botMsg.message.buttons.find(\r\n          (btn) => btn.correct === true\r\n        )?.title;\r\n\r\n        setMessages([\r\n          ...messages,\r\n          { from: \"Me\", text: message.title },\r\n          {\r\n            from: \"English BOT\",\r\n            text: `\r\n            ${feedbackCorrection[\r\n              Math.floor(Math.random() * (feedbackCorrection.length - 1))\r\n            ].replace(\"{ANSWER}\", `<strong>${result}</strong>`)}\r\n            `,\r\n            type: message?.type,\r\n            buttons: message?.buttons,\r\n          },\r\n        ]);\r\n      }\r\n      if (!botMsg.last) {\r\n        setTyping(true);\r\n        socket.emit(\"getModelQuestion\", { questionNo, modelNo });\r\n      } else {\r\n        socket.emit(\"getEndQuestion\", {});\r\n      }\r\n    }, 1000);\r\n  };\r\n\r\n  return (\r\n    <StyledMessages ref={ref}>\r\n      {messages.map(({ from, text, type, buttons }, index) => (\r\n        <>\r\n          {from === \"English BOT\" ? (\r\n            <StyledBotDiv key={cuid()}>\r\n              <img src={botIcon} alt=\" \" />\r\n\r\n              {type === \"@message-type/button\" ? (\r\n                <MessageWithButton\r\n                  buttons={buttons}\r\n                  text={text}\r\n                  onBtnClick={onBtnClick}\r\n                />\r\n              ) : (\r\n                <span\r\n                  dangerouslySetInnerHTML={{\r\n                    __html: `\r\n                    <style>\r\n                    strong{\r\n                      color: #74eaf4;\r\n                    }\r\n                    </style>\r\n                    <div>${text}</div>\r\n                    `,\r\n                  }}\r\n                ></span>\r\n              )}\r\n            </StyledBotDiv>\r\n          ) : (\r\n            <StyledMeDiv key={index}>\r\n              <span>{text}</span>\r\n            </StyledMeDiv>\r\n          )}\r\n        </>\r\n      ))}\r\n    </StyledMessages>\r\n  );\r\n};\r\n\r\nexport default MessagesContainer;\r\n","export default __webpack_public_path__ + \"static/media/send.01c24b89.png\";","import React, { useState } from \"react\";\r\nimport send from \"../../images/send.png\";\r\nimport { StyledForm } from \"./styles\";\r\nimport { socket } from \"./const\";\r\n\r\nconst FormContainer = ({\r\n  questionNo,\r\n  currentQuestionType,\r\n  botMsg,\r\n  modelNo,\r\n  messages,\r\n  setTyping,\r\n  setQuestionNo,\r\n  setMessages,\r\n  setBotMsg,\r\n  setCurrentQuestionType,\r\n}) => {\r\n  const [msg, setMsg] = useState({ text: \"\" });\r\n  const sendMsgSubmit = (e) => {\r\n    e.preventDefault();\r\n    setMessages([...messages, { from: \"Me\", text: msg.text }]);\r\n    setTyping(true);\r\n    if (\r\n      botMsg?.message?.response?.length > 0 &&\r\n      currentQuestionType === \"intro\"\r\n    ) {\r\n      setTimeout(() => {\r\n        const response =\r\n          botMsg.message.response[\r\n            Math.floor(Math.random() * (botMsg.message.response.length - 1))\r\n          ];\r\n        setMessages([\r\n          ...messages,\r\n          { from: \"Me\", text: msg.text },\r\n          { from: \"English BOT\", text: response },\r\n        ]);\r\n        if (!botMsg.last) {\r\n          setTyping(true);\r\n          socket.emit(\"getIntroQuestion\", { questionNo });\r\n        } else {\r\n          setCurrentQuestionType(\"model\");\r\n          setQuestionNo(0);\r\n          setBotMsg({});\r\n          socket.emit(\"getModelQuestion\", { questionNo, modelNo });\r\n        }\r\n      }, 1000);\r\n    }\r\n    if (currentQuestionType === \"model\") {\r\n      setTyping(true);\r\n      socket.emit(\"checkGrammer\", { ...msg, _id: botMsg.message._id });\r\n      // setBotMsg({});\r\n    } else {\r\n      setTyping(false);\r\n    }\r\n    setMsg({ text: \"\" });\r\n  };\r\n\r\n  return (\r\n    <StyledForm onSubmit={(e) => sendMsgSubmit(e)}>\r\n      <input\r\n        value={msg.text}\r\n        onChange={(e) => setMsg({ text: e.target.value })}\r\n        type=\"text\"\r\n        placeholder=\"send a message...\"\r\n      />\r\n      <button type=\"submit\">\r\n        <img src={send} alt=\"\" />\r\n      </button>\r\n    </StyledForm>\r\n  );\r\n};\r\n\r\nexport default FormContainer;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport Typing from \"../shared/Typing\";\r\nimport { Content } from \"../shared/styles\";\r\nimport MessagesContainer from \"./MessagesContainer\";\r\nimport FormContainer from \"../shared/FormContainer\";\r\n\r\nconst FirstBot = ({ setActive }) => {\r\n  const [questionNo, setQuestionNo] = useState(\r\n    JSON.parse(localStorage.getItem(\"bot1\"))?.questionNo || 0\r\n  );\r\n  const [modelNo, setModelNo] = useState(\r\n    JSON.parse(localStorage.getItem(\"bot1\"))?.modelNo ??\r\n      (JSON.parse(localStorage.getItem(\"doneBefore1\"))?.flag\r\n        ? Math.floor(Math.random() * 3)\r\n        : 0)\r\n  );\r\n\r\n  const [messages, setMessages] = useState(\r\n    JSON.parse(localStorage.getItem(\"messages1\"))?.messages || []\r\n  );\r\n\r\n  const [typing, setTyping] = useState(\r\n    JSON.parse(localStorage.getItem(\"bot1\"))?.typing ?? true\r\n  );\r\n  const [botMsg, setBotMsg] = useState(\r\n    JSON.parse(localStorage.getItem(\"bot1\"))?.botMsg || {}\r\n  );\r\n  const [currentQuestionType, setCurrentQuestionType] = useState(\r\n    JSON.parse(localStorage.getItem(\"bot1\"))?.currentQuestionType || \"intro\"\r\n  );\r\n\r\n  useEffect(() => {\r\n    setActive(true);\r\n  }, [setActive]);\r\n\r\n  useEffect(() => {\r\n    localStorage.setItem(\r\n      \"bot1\",\r\n      JSON.stringify({\r\n        questionNo,\r\n        currentQuestionType,\r\n        botMsg,\r\n        typing,\r\n        modelNo,\r\n      })\r\n    );\r\n  }, [questionNo, currentQuestionType, botMsg, typing, modelNo]);\r\n\r\n  return (\r\n    <>\r\n      <Content>\r\n        <MessagesContainer\r\n          questionNo={questionNo}\r\n          currentQuestionType={currentQuestionType}\r\n          botMsg={botMsg}\r\n          typing={typing}\r\n          modelNo={modelNo}\r\n          messages={messages}\r\n          setTyping={setTyping}\r\n          setQuestionNo={setQuestionNo}\r\n          setMessages={setMessages}\r\n          setBotMsg={setBotMsg}\r\n          setModelNo={setModelNo}\r\n          setCurrentQuestionType={setCurrentQuestionType}\r\n        />\r\n        {typing && <Typing />}\r\n        <FormContainer\r\n          questionNo={questionNo}\r\n          currentQuestionType={currentQuestionType}\r\n          botMsg={botMsg}\r\n          modelNo={modelNo}\r\n          messages={messages}\r\n          setTyping={setTyping}\r\n          setQuestionNo={setQuestionNo}\r\n          setMessages={setMessages}\r\n          setBotMsg={setBotMsg}\r\n          setCurrentQuestionType={setCurrentQuestionType}\r\n        />\r\n      </Content>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default FirstBot;\r\n","import React, { useEffect, useRef } from \"react\";\r\nimport botIcon from \"../../images/bot-icon.png\";\r\nimport MessageWithButton from \"../shared/MessageWithButton\";\r\nimport cuid from \"cuid\";\r\nimport { StyledMessages, StyledBotDiv, StyledMeDiv } from \"../shared/styles\";\r\nimport {\r\n  socket,\r\n  feedbackRight,\r\n  endMessages,\r\n  feedback_wrong,\r\n} from \"../shared/const\";\r\n\r\nconst SecondBot = ({\r\n  questionNo,\r\n  currentQuestionType,\r\n  botMsg,\r\n  modelNo,\r\n  messages,\r\n  setTyping,\r\n  setQuestionNo,\r\n  setMessages,\r\n  setBotMsg,\r\n  setModelNo,\r\n  setCurrentQuestionType,\r\n}) => {\r\n  const ref = useRef();\r\n\r\n  const scrollToBottom = () => {\r\n    ref?.current?.addEventListener(\"DOMNodeInserted\", (event) => {\r\n      const { currentTarget: target } = event;\r\n      target.scroll({ top: target.scrollHeight, behavior: \"smooth\" });\r\n    });\r\n  };\r\n\r\n  useEffect(() => {\r\n    localStorage.setItem(\"messages2\", JSON.stringify({ messages }));\r\n    if (messages?.[messages.length - 1]?.from === \"English BOT\") {\r\n      const audio = new Audio(\r\n        \"https://english-bot-test.herokuapp.com/assets/elegant-notification-sound.mp3\"\r\n      );\r\n      audio.play();\r\n    }\r\n    scrollToBottom();\r\n  }, [messages]);\r\n\r\n  useEffect(() => {\r\n    if (messages.length === 0) {\r\n      setTimeout(() => {\r\n        socket.emit(\"getIntroQuestion\", { questionNo });\r\n        socket.on(\"responseIntroQuestion\", ({ message, last }) => {\r\n          setMessages([\r\n            ...messages,\r\n            { from: \"English BOT\", text: message.text },\r\n          ]);\r\n          if (!last) {\r\n            setQuestionNo(questionNo + 1);\r\n          }\r\n          setTyping(false);\r\n        });\r\n      }, 2000);\r\n    }\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (currentQuestionType === \"model\") {\r\n      socket.off(\"checkGrammerResult\");\r\n      socket.on(\"checkGrammerResult\", ({ message, result: checkResult }) => {\r\n        const { result, corrections } = checkResult;\r\n        if (\r\n          corrections?.length === 0 ||\r\n          message?.toLowerCase().replace(/\\ /g, \"\") ===\r\n            result?.toLocaleLowerCase().replace(/\\ /g, \"\")\r\n        ) {\r\n          setMessages([\r\n            ...messages,\r\n            {\r\n              from: \"English BOT\",\r\n              text: feedbackRight[\r\n                Math.floor(Math.random() * (feedbackRight.length - 1))\r\n              ],\r\n              type: message?.type,\r\n              buttons: message?.buttons,\r\n            },\r\n          ]);\r\n        } else {\r\n          setMessages([\r\n            ...messages,\r\n            {\r\n              from: \"English BOT\",\r\n              text: feedback_wrong[\r\n                Math.floor(Math.random() * (feedback_wrong.length - 1))\r\n              ],\r\n              type: message?.type,\r\n              buttons: message?.buttons,\r\n            },\r\n            {\r\n              from: \"English BOT\",\r\n              text: `the right answer is <strong>${result}</strong>`,\r\n              type: message?.type,\r\n              buttons: message?.buttons,\r\n            },\r\n          ]);\r\n        }\r\n        if (!botMsg.last) {\r\n          setTyping(true);\r\n          socket.emit(\"getModelQuestion\", { questionNo, modelNo });\r\n        } else {\r\n          socket.emit(\"getEndQuestion\", {});\r\n        }\r\n      });\r\n    }\r\n\r\n    // close the older listener then open new one\r\n    socket.off(\"responseIntroQuestion\");\r\n    socket.off(\"responseModelQuestion\");\r\n\r\n    socket.on(\"responseIntroQuestion\", ({ message, last }) => {\r\n      setMessages([\r\n        ...messages,\r\n        {\r\n          from: \"English BOT\",\r\n          text: message.text,\r\n          type: message?.type,\r\n          buttons: message?.buttons,\r\n        },\r\n      ]);\r\n      setBotMsg({ message, last });\r\n      if (!last) {\r\n        setQuestionNo(questionNo + 1);\r\n      }\r\n      setTyping(false);\r\n    });\r\n\r\n    socket.on(\"responseModelQuestion\", ({ message, last }) => {\r\n      setMessages([\r\n        ...messages,\r\n        {\r\n          from: \"English BOT\",\r\n          text: message?.text,\r\n          type: message?.type,\r\n          buttons: message?.buttons,\r\n        },\r\n      ]);\r\n      setBotMsg({ message, last });\r\n      if (!last) {\r\n        setQuestionNo(questionNo + 1);\r\n      } else {\r\n        if (\r\n          !JSON.parse(localStorage.getItem(\"doneBefore2\"))?.flag &&\r\n          modelNo < 2\r\n        ) {\r\n          setModelNo(modelNo + 1);\r\n          setBotMsg({ ...botMsg, last: false });\r\n          setQuestionNo(0);\r\n        } else if (\r\n          !JSON.parse(localStorage.getItem(\"doneBefore2\"))?.flag &&\r\n          modelNo === 2 &&\r\n          botMsg.last\r\n        ) {\r\n          localStorage.setItem(\"doneBefore2\", JSON.stringify({ flag: true }));\r\n          setMessages([\r\n            ...messages,\r\n            {\r\n              from: \"English BOT\",\r\n              text: endMessages[\r\n                Math.floor(Math.random() * (endMessages.length - 1))\r\n              ],\r\n            },\r\n          ]);\r\n          setCurrentQuestionType(\"end\");\r\n          setTyping(false);\r\n        } else {\r\n          setMessages([\r\n            ...messages,\r\n            {\r\n              from: \"English BOT\",\r\n              text: endMessages[\r\n                Math.floor(Math.random() * (endMessages.length - 1))\r\n              ],\r\n            },\r\n          ]);\r\n          setCurrentQuestionType(\"end\");\r\n        }\r\n      }\r\n      setTyping(false);\r\n    });\r\n  }, [\r\n    messages,\r\n    questionNo,\r\n    currentQuestionType,\r\n    modelNo,\r\n    botMsg.last,\r\n    botMsg,\r\n    setMessages,\r\n    setTyping,\r\n    setBotMsg,\r\n    setQuestionNo,\r\n    setModelNo,\r\n    setCurrentQuestionType,\r\n  ]);\r\n\r\n  const onBtnClick = (message) => {\r\n    setMessages([...messages, { from: \"Me\", text: message.title }]);\r\n    setTyping(true);\r\n    setTimeout(() => {\r\n      setTyping(false);\r\n      if (message.correct === true) {\r\n        setMessages([\r\n          ...messages,\r\n          { from: \"Me\", text: message.title },\r\n          {\r\n            from: \"English BOT\",\r\n            text: feedbackRight[\r\n              Math.floor(Math.random() * (feedbackRight.length - 1))\r\n            ],\r\n            type: message?.type,\r\n            buttons: message?.buttons,\r\n          },\r\n        ]);\r\n      } else {\r\n        const result = botMsg.message.buttons.find(\r\n          (btn) => btn.correct === true\r\n        )?.title;\r\n\r\n        setMessages([\r\n          ...messages,\r\n          { from: \"Me\", text: message.title },\r\n          {\r\n            from: \"English BOT\",\r\n            text: feedback_wrong[\r\n              Math.floor(Math.random() * (feedback_wrong.length - 1))\r\n            ],\r\n            type: message?.type,\r\n            buttons: message?.buttons,\r\n          },\r\n          {\r\n            from: \"English BOT\",\r\n            text: `the right answer is <strong>${result}</strong>`,\r\n            type: message?.type,\r\n            buttons: message?.buttons,\r\n          },\r\n        ]);\r\n      }\r\n      if (!botMsg.last) {\r\n        setTyping(true);\r\n        socket.emit(\"getModelQuestion\", { questionNo, modelNo });\r\n      } else {\r\n        socket.emit(\"getEndQuestion\", {});\r\n      }\r\n    }, 1000);\r\n  };\r\n\r\n  return (\r\n    <StyledMessages ref={ref}>\r\n      {messages.map(({ from, text, type, buttons }, index) => (\r\n        <>\r\n          {from === \"English BOT\" ? (\r\n            <StyledBotDiv key={cuid()}>\r\n              <img src={botIcon} alt=\" \" />\r\n\r\n              {type === \"@message-type/button\" ? (\r\n                <MessageWithButton\r\n                  buttons={buttons}\r\n                  text={text}\r\n                  setMessages={setMessages}\r\n                  messages={messages}\r\n                  socket={socket}\r\n                  onBtnClick={onBtnClick}\r\n                />\r\n              ) : (\r\n                <span\r\n                  dangerouslySetInnerHTML={{\r\n                    __html: `\r\n                    <style>\r\n                    strong{\r\n                      color: #74eaf4;\r\n                    }\r\n                    </style>\r\n                    <div>${text}</div>\r\n                    `,\r\n                  }}\r\n                ></span>\r\n              )}\r\n            </StyledBotDiv>\r\n          ) : (\r\n            <StyledMeDiv key={index}>\r\n              <span>{text}</span>\r\n            </StyledMeDiv>\r\n          )}\r\n        </>\r\n      ))}\r\n    </StyledMessages>\r\n  );\r\n};\r\n\r\nexport default SecondBot;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport Typing from \"../shared/Typing\";\r\nimport MessagesContainer from \"./MessagesContainer\";\r\nimport FormContainer from \"../shared/FormContainer\";\r\nimport { Content } from \"../shared/styles\";\r\n\r\nconst SecondBot = ({ setActive }) => {\r\n  const [questionNo, setQuestionNo] = useState(\r\n    JSON.parse(localStorage.getItem(\"bot2\"))?.questionNo || 0\r\n  );\r\n  const [modelNo, setModelNo] = useState(\r\n    JSON.parse(localStorage.getItem(\"bot2\"))?.modelNo ??\r\n      (JSON.parse(localStorage.getItem(\"doneBefore2\"))?.flag\r\n        ? Math.floor(Math.random() * 3)\r\n        : 0)\r\n  );\r\n\r\n  const [messages, setMessages] = useState(\r\n    JSON.parse(localStorage.getItem(\"messages2\"))?.messages || []\r\n  );\r\n\r\n  const [typing, setTyping] = useState(\r\n    JSON.parse(localStorage.getItem(\"bot2\"))?.typing ?? true\r\n  );\r\n  const [botMsg, setBotMsg] = useState(\r\n    JSON.parse(localStorage.getItem(\"bot2\"))?.botMsg || {}\r\n  );\r\n  const [currentQuestionType, setCurrentQuestionType] = useState(\r\n    JSON.parse(localStorage.getItem(\"bot2\"))?.currentQuestionType || \"intro\"\r\n  );\r\n\r\n  useEffect(() => {\r\n    setActive(true);\r\n  }, [setActive]);\r\n\r\n  useEffect(() => {\r\n    localStorage.setItem(\r\n      \"bot2\",\r\n      JSON.stringify({\r\n        questionNo,\r\n        currentQuestionType,\r\n        botMsg,\r\n        typing,\r\n        modelNo,\r\n      })\r\n    );\r\n  }, [questionNo, currentQuestionType, botMsg, typing, modelNo]);\r\n\r\n  return (\r\n    <>\r\n      <Content>\r\n        <MessagesContainer\r\n          questionNo={questionNo}\r\n          currentQuestionType={currentQuestionType}\r\n          botMsg={botMsg}\r\n          typing={typing}\r\n          modelNo={modelNo}\r\n          messages={messages}\r\n          setTyping={setTyping}\r\n          setQuestionNo={setQuestionNo}\r\n          setMessages={setMessages}\r\n          setBotMsg={setBotMsg}\r\n          setModelNo={setModelNo}\r\n          setCurrentQuestionType={setCurrentQuestionType}\r\n        />\r\n        {typing && <Typing />}\r\n        <FormContainer\r\n          questionNo={questionNo}\r\n          currentQuestionType={currentQuestionType}\r\n          botMsg={botMsg}\r\n          modelNo={modelNo}\r\n          messages={messages}\r\n          setTyping={setTyping}\r\n          setQuestionNo={setQuestionNo}\r\n          setMessages={setMessages}\r\n          setBotMsg={setBotMsg}\r\n          setCurrentQuestionType={setCurrentQuestionType}\r\n        />\r\n      </Content>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default SecondBot;\r\n","import React, { useState, useEffect, useRef } from \"react\";\r\nimport botIcon from \"../../images/bot-icon.png\";\r\nimport MessageWithButton from \"../shared/MessageWithButton\";\r\nimport cuid from \"cuid\";\r\nimport { StyledMessages, StyledBotDiv, StyledMeDiv } from \"../shared/styles\";\r\nimport {\r\n  socket,\r\n  feedbackCorrection,\r\n  feedbackRight,\r\n  endMessages,\r\n  retry,\r\n  after_retry,\r\n} from \"../shared/const\";\r\n\r\nconst ThirdBot = ({\r\n  questionNo,\r\n  currentQuestionType,\r\n  botMsg,\r\n  modelNo,\r\n  messages,\r\n  setTyping,\r\n  setQuestionNo,\r\n  setMessages,\r\n  setBotMsg,\r\n  setModelNo,\r\n  setCurrentQuestionType,\r\n}) => {\r\n  const [times, setTimes] = useState(0);\r\n\r\n  const ref = useRef();\r\n\r\n  const scrollToBottom = () => {\r\n    ref?.current?.addEventListener(\"DOMNodeInserted\", (event) => {\r\n      const { currentTarget: target } = event;\r\n      target.scroll({ top: target.scrollHeight, behavior: \"smooth\" });\r\n    });\r\n  };\r\n\r\n  useEffect(() => {\r\n    localStorage.setItem(\"messages3\", JSON.stringify({ messages }));\r\n    if (messages?.[messages.length - 1]?.from === \"English BOT\") {\r\n      const audio = new Audio(\r\n        \"https://english-bot-test.herokuapp.com/assets/elegant-notification-sound.mp3\"\r\n      );\r\n      audio.play();\r\n    }\r\n    scrollToBottom();\r\n  }, [messages]);\r\n\r\n  useEffect(() => {\r\n    if (messages.length === 0) {\r\n      setTimeout(() => {\r\n        socket.emit(\"getIntroQuestion\", { questionNo });\r\n        socket.on(\"responseIntroQuestion\", ({ message, last }) => {\r\n          setMessages([\r\n            ...messages,\r\n            { from: \"English BOT\", text: message.text },\r\n          ]);\r\n          if (!last) {\r\n            setQuestionNo(questionNo + 1);\r\n          }\r\n          setTyping(false);\r\n        });\r\n      }, 2000);\r\n    }\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (currentQuestionType === \"model\") {\r\n      socket.off(\"checkGrammerResult\");\r\n      socket.on(\"checkGrammerResult\", ({ message, result: checkResult }) => {\r\n        const { result, corrections } = checkResult;\r\n        if (\r\n          corrections?.length === 0 ||\r\n          message?.toLowerCase().replace(/\\ /g, \"\") ===\r\n            result?.toLocaleLowerCase().replace(/\\ /g, \"\")\r\n        ) {\r\n          setMessages([\r\n            ...messages,\r\n            {\r\n              from: \"English BOT\",\r\n              text: feedbackRight[\r\n                Math.floor(Math.random() * (feedbackRight.length - 1))\r\n              ],\r\n              type: message?.type,\r\n              buttons: message?.buttons,\r\n            },\r\n          ]);\r\n          if (!botMsg.last) {\r\n            setTyping(true);\r\n            socket.emit(\"getModelQuestion\", { questionNo, modelNo });\r\n          } else {\r\n            socket.emit(\"getEndQuestion\", {});\r\n          }\r\n        } else {\r\n          setTimes(times + 1);\r\n          if (times >= 0 && times < 3) {\r\n            setMessages([\r\n              ...messages,\r\n              {\r\n                from: \"English BOT\",\r\n                text: retry[Math.floor(Math.random() * (retry.length - 1))],\r\n                type: message?.type,\r\n                buttons: message?.buttons,\r\n              },\r\n            ]);\r\n            setTyping(false);\r\n          } else if (times === 3) {\r\n            setMessages([\r\n              ...messages,\r\n              {\r\n                from: \"English BOT\",\r\n                text: after_retry[\r\n                  Math.floor(Math.random() * (after_retry.length - 1))\r\n                ],\r\n                type: message?.type,\r\n                buttons: message?.buttons,\r\n              },\r\n            ]);\r\n            setTyping(false);\r\n          } else {\r\n            setTimes(0);\r\n            setMessages([\r\n              ...messages,\r\n              {\r\n                from: \"English BOT\",\r\n                text: `\r\n                    ${feedbackCorrection[\r\n                      Math.floor(\r\n                        Math.random() * (feedbackCorrection.length - 1)\r\n                      )\r\n                    ].replace(\"{ANSWER}\", `<strong>${result}</strong>`)}\r\n                    `,\r\n                type: message?.type,\r\n                buttons: message?.buttons,\r\n              },\r\n            ]);\r\n            if (!botMsg.last) {\r\n              setTyping(true);\r\n              socket.emit(\"getModelQuestion\", { questionNo, modelNo });\r\n            } else {\r\n              socket.emit(\"getEndQuestion\", {});\r\n            }\r\n          }\r\n        }\r\n      });\r\n    }\r\n\r\n    // close the older listener then open new one\r\n    socket.off(\"responseIntroQuestion\");\r\n    socket.off(\"responseModelQuestion\");\r\n\r\n    socket.on(\"responseIntroQuestion\", ({ message, last }) => {\r\n      setMessages([\r\n        ...messages,\r\n        {\r\n          from: \"English BOT\",\r\n          text: message.text,\r\n          type: message?.type,\r\n          buttons: message?.buttons,\r\n        },\r\n      ]);\r\n      setBotMsg({ message, last });\r\n      if (!last) {\r\n        setQuestionNo(questionNo + 1);\r\n      }\r\n      setTyping(false);\r\n    });\r\n\r\n    socket.on(\"responseModelQuestion\", ({ message, last }) => {\r\n      setMessages([\r\n        ...messages,\r\n        {\r\n          from: \"English BOT\",\r\n          text: message?.text,\r\n          type: message?.type,\r\n          buttons: message?.buttons,\r\n        },\r\n      ]);\r\n      setBotMsg({ message, last });\r\n      if (!last) {\r\n        setQuestionNo(questionNo + 1);\r\n      } else {\r\n        if (\r\n          !JSON.parse(localStorage.getItem(\"doneBefore3\"))?.flag &&\r\n          modelNo < 2\r\n        ) {\r\n          setModelNo(modelNo + 1);\r\n          setBotMsg({ ...botMsg, last: false });\r\n          setQuestionNo(0);\r\n        } else if (\r\n          !JSON.parse(localStorage.getItem(\"doneBefore3\"))?.flag &&\r\n          modelNo === 2 &&\r\n          botMsg.last\r\n        ) {\r\n          localStorage.setItem(\"doneBefore3\", JSON.stringify({ flag: true }));\r\n          setMessages([\r\n            ...messages,\r\n            {\r\n              from: \"English BOT\",\r\n              text: endMessages[\r\n                Math.floor(Math.random() * (endMessages.length - 1))\r\n              ],\r\n            },\r\n          ]);\r\n          setCurrentQuestionType(\"end\");\r\n          setTyping(false);\r\n        } else {\r\n          setMessages([\r\n            ...messages,\r\n            {\r\n              from: \"English BOT\",\r\n              text: endMessages[\r\n                Math.floor(Math.random() * (endMessages.length - 1))\r\n              ],\r\n            },\r\n          ]);\r\n          setCurrentQuestionType(\"end\");\r\n        }\r\n      }\r\n\r\n      setTyping(false);\r\n    });\r\n  }, [\r\n    messages,\r\n    questionNo,\r\n    currentQuestionType,\r\n    modelNo,\r\n    botMsg.last,\r\n    times,\r\n    botMsg,\r\n    setMessages,\r\n    setTyping,\r\n    setBotMsg,\r\n    setQuestionNo,\r\n    setModelNo,\r\n    setCurrentQuestionType,\r\n  ]);\r\n\r\n  const onBtnClick = (message) => {\r\n    let _messages = [...messages, { from: \"Me\", text: message.title }];\r\n    setMessages([...messages, { from: \"Me\", text: message.title }]);\r\n    setTyping(true);\r\n    setTimeout(() => {\r\n      setTyping(false);\r\n      if (message.correct === true) {\r\n        setMessages([\r\n          ..._messages,\r\n          {\r\n            from: \"English BOT\",\r\n            text: feedbackRight[\r\n              Math.floor(Math.random() * (feedbackRight.length - 1))\r\n            ],\r\n            type: message?.type,\r\n            buttons: message?.buttons,\r\n          },\r\n        ]);\r\n        setTyping(true);\r\n        if (!botMsg.last) {\r\n          socket.emit(\"getModelQuestion\", { questionNo, modelNo });\r\n        } else {\r\n          socket.emit(\"getEndQuestion\", {});\r\n        }\r\n      } else {\r\n        setTimes(times + 1);\r\n        setTyping(false);\r\n        if (times >= 0 && times < 3) {\r\n          setMessages([\r\n            ..._messages,\r\n            {\r\n              from: \"English BOT\",\r\n              text: retry[Math.floor(Math.random() * (retry.length - 1))],\r\n              type: message?.type,\r\n              buttons: message?.buttons,\r\n            },\r\n          ]);\r\n          setTyping(false);\r\n        } else if (times === 3) {\r\n          setMessages([\r\n            ..._messages,\r\n            {\r\n              from: \"English BOT\",\r\n              text: after_retry[\r\n                Math.floor(Math.random() * (after_retry.length - 1))\r\n              ],\r\n              type: message?.type,\r\n              buttons: message?.buttons,\r\n            },\r\n          ]);\r\n          setTyping(false);\r\n        } else {\r\n          setTimes(0);\r\n          const result = botMsg.message.buttons.find(\r\n            (btn) => btn.correct === true\r\n          )?.title;\r\n          setMessages([\r\n            ..._messages,\r\n            { from: \"Me\", text: message.title },\r\n            {\r\n              from: \"English BOT\",\r\n              text: `\r\n                ${feedbackCorrection[\r\n                  Math.floor(Math.random() * (feedbackCorrection.length - 1))\r\n                ].replace(\"{ANSWER}\", `<strong>${result}</strong>`)}\r\n                `,\r\n              type: message?.type,\r\n              buttons: message?.buttons,\r\n            },\r\n          ]);\r\n          if (!botMsg.last) {\r\n            setTyping(true);\r\n            socket.emit(\"getModelQuestion\", { questionNo, modelNo });\r\n          } else {\r\n            socket.emit(\"getEndQuestion\", {});\r\n          }\r\n        }\r\n      }\r\n    }, 1000);\r\n  };\r\n\r\n  return (\r\n    <StyledMessages ref={ref}>\r\n      {messages.map(({ from, text, type, buttons }, index) => (\r\n        <>\r\n          {from === \"English BOT\" ? (\r\n            <StyledBotDiv key={cuid()}>\r\n              <img src={botIcon} alt=\" \" />\r\n\r\n              {type === \"@message-type/button\" ? (\r\n                <MessageWithButton\r\n                  buttons={buttons}\r\n                  text={text}\r\n                  setMessages={setMessages}\r\n                  messages={messages}\r\n                  socket={socket}\r\n                  onBtnClick={onBtnClick}\r\n                />\r\n              ) : (\r\n                <span\r\n                  dangerouslySetInnerHTML={{\r\n                    __html: `\r\n                    <style>\r\n                    strong{\r\n                      color: #74eaf4;\r\n                    }\r\n                    </style>\r\n                    <div>${text}</div>\r\n                    `,\r\n                  }}\r\n                ></span>\r\n              )}\r\n            </StyledBotDiv>\r\n          ) : (\r\n            <StyledMeDiv key={index}>\r\n              <span>{text}</span>\r\n            </StyledMeDiv>\r\n          )}\r\n        </>\r\n      ))}\r\n    </StyledMessages>\r\n  );\r\n};\r\n\r\nexport default ThirdBot;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport MessagesContainer from \"./MessagesContainer\";\r\nimport FormContainer from \"../shared/FormContainer\";\r\nimport Typing from \"../shared/Typing\";\r\nimport { Content } from \"../shared/styles\";\r\n\r\nconst ThirdBot = ({ setActive }) => {\r\n  const [questionNo, setQuestionNo] = useState(\r\n    JSON.parse(localStorage.getItem(\"bot3\"))?.questionNo || 0\r\n  );\r\n  const [modelNo, setModelNo] = useState(\r\n    JSON.parse(localStorage.getItem(\"bot3\"))?.modelNo ??\r\n      (JSON.parse(localStorage.getItem(\"doneBefore3\"))?.flag\r\n        ? Math.floor(Math.random() * 3)\r\n        : 0)\r\n  );\r\n\r\n  const [messages, setMessages] = useState(\r\n    JSON.parse(localStorage.getItem(\"messages3\"))?.messages || []\r\n  );\r\n\r\n  const [typing, setTyping] = useState(\r\n    JSON.parse(localStorage.getItem(\"bot3\"))?.typing ?? true\r\n  );\r\n  const [botMsg, setBotMsg] = useState(\r\n    JSON.parse(localStorage.getItem(\"bot3\"))?.botMsg || {}\r\n  );\r\n  const [currentQuestionType, setCurrentQuestionType] = useState(\r\n    JSON.parse(localStorage.getItem(\"bot3\"))?.currentQuestionType || \"intro\"\r\n  );\r\n\r\n  useEffect(() => {\r\n    setActive(true);\r\n  }, [setActive]);\r\n\r\n  useEffect(() => {\r\n    localStorage.setItem(\r\n      \"bot3\",\r\n      JSON.stringify({\r\n        questionNo,\r\n        currentQuestionType,\r\n        botMsg,\r\n        typing,\r\n        modelNo,\r\n      })\r\n    );\r\n  }, [questionNo, currentQuestionType, botMsg, typing, modelNo]);\r\n\r\n  return (\r\n    <>\r\n      <Content>\r\n        <MessagesContainer\r\n          questionNo={questionNo}\r\n          currentQuestionType={currentQuestionType}\r\n          botMsg={botMsg}\r\n          typing={typing}\r\n          modelNo={modelNo}\r\n          messages={messages}\r\n          setTyping={setTyping}\r\n          setQuestionNo={setQuestionNo}\r\n          setMessages={setMessages}\r\n          setBotMsg={setBotMsg}\r\n          setModelNo={setModelNo}\r\n          setCurrentQuestionType={setCurrentQuestionType}\r\n        />\r\n        {typing && <Typing />}\r\n        <FormContainer\r\n          questionNo={questionNo}\r\n          currentQuestionType={currentQuestionType}\r\n          botMsg={botMsg}\r\n          modelNo={modelNo}\r\n          messages={messages}\r\n          setTyping={setTyping}\r\n          setQuestionNo={setQuestionNo}\r\n          setMessages={setMessages}\r\n          setBotMsg={setBotMsg}\r\n          setCurrentQuestionType={setCurrentQuestionType}\r\n        />\r\n      </Content>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ThirdBot;\r\n","import React, { useState } from \"react\";\nimport Home from \"./components/Home\";\nimport Header from \"./components/Header\";\nimport FirstBot from \"./components/firstBotComponents/FirstBot\";\nimport SecondBot from \"./components/secondBotComponents/SecondBot\";\nimport ThirdBot from \"./components/thirdBotComponents/ThirdBot\";\nimport { Routes, Route } from \"react-router-dom\";\nimport styled from \"styled-components\";\n\nconst App = () => {\n  const [active, setActive] = useState(false);\n  return (\n    <>\n      <Header active={active} setActive={setActive} />\n      <Container>\n        <Routes>\n          <Route path=\"/english-bot\" element={<Home setActive={setActive} />} />\n          <Route\n            path=\"/english-bot/bot1\"\n            element={<FirstBot setActive={setActive} />}\n          />\n          <Route\n            path=\"/english-bot/bot2\"\n            element={<SecondBot setActive={setActive} />}\n          />\n          <Route\n            path=\"/english-bot/bot3\"\n            element={<ThirdBot setActive={setActive} />}\n          />\n        </Routes>\n      </Container>\n    </>\n  );\n};\n\nexport default App;\n\n//styles\nconst Container = styled.div`\n  padding: 0px 25px;\n`;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport App from \"./App\";\n\nimport \"./App.css\";\n\nReactDOM.render(\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}
{"version":3,"sources":["images/english.png","images/left-arrow.png","images/send.png","images/bot-icon.png","components/Typing.js","components/MessageWithButton.js","components/Chat.js","components/Bot.js","contexts/dataContext.js","App.js","index.js"],"names":["Typing","TypingDiv","DotesContainer","Dot","styled","div","ul","typingAnimation","keyframes","li","MessageWithButton","buttons","text","onBtnClick","Card","StyledH3","StyledUl","map","btn","StyledLi","onClick","title","cuid","h3","socket","io","feedbackCorrection","feedbackRight","end","Chat","ref","useRef","useState","JSON","parse","localStorage","getItem","questionNo","setQuestionNo","modelNo","Math","floor","random","messages","setMessages","msg","setMsg","typing","setTyping","botMsg","setBotMsg","currentQuestionType","setCurrentQuestionType","useEffect","setItem","stringify","length","setTimeout","emit","on","message","last","from","off","checkResult","result","corrections","toLowerCase","replace","toLocaleLowerCase","type","current","addEventListener","event","target","currentTarget","scroll","top","scrollHeight","behavior","correct","find","console","log","StyledMessages","index","StyledBotDiv","src","botIcon","alt","dangerouslySetInnerHTML","__html","StyledMeDiv","StyledDiv","onSubmit","e","preventDefault","response","_id","sendMsgSubmit","value","onChange","placeholder","send","form","Bot","active","setActive","Header","Container","StyledBackImg","leftArrow","StyledH1","StyledBotImg","englishBot","Content","className","img","h1","Context","React","createContext","DataContext","children","newData","setNewData","fetchData","a","axios","get","data","Provider","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.7cae37eb.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/english.9c170a25.png\";","export default __webpack_public_path__ + \"static/media/left-arrow.903af5d7.png\";","export default __webpack_public_path__ + \"static/media/send.01c24b89.png\";","export default __webpack_public_path__ + \"static/media/bot-icon.cfbb308b.png\";","import React from \"react\";\r\nimport styled, { keyframes } from \"styled-components\";\r\n\r\nconst Typing = () => {\r\n  return (\r\n    <TypingDiv>\r\n      <DotesContainer>\r\n        <Dot />\r\n        <Dot />\r\n        <Dot />\r\n      </DotesContainer>\r\n    </TypingDiv>\r\n  );\r\n};\r\n\r\nexport default Typing;\r\n\r\nconst TypingDiv = styled.div`\r\n  background-color: #717171;\r\n  padding: 15px 20px;\r\n  border-radius: 20px;\r\n  border-bottom-left-radius: 2px;\r\n  width: fit-content;\r\n  margin: 0px 0px 20px 20px;\r\n`;\r\n\r\nconst DotesContainer = styled.ul`\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  list-style: none;\r\n  height: 17px;\r\n  padding: 0px;\r\n  margin: 0px;\r\n`;\r\n\r\nconst typingAnimation = keyframes`\r\n 0% {\r\n    transform: translateY(0px);\r\n    background-color:white;\r\n  }\r\n  28% {\r\n    transform: translateY(-7px);\r\n    background-color:#d9d8d8;\r\n  }\r\n  44% {\r\n    transform: translateY(0px);\r\n    background-color:#bbbaba;\r\n  }\r\n`;\r\n\r\nconst Dot = styled.li`\r\n  background-color: white;\r\n  border-radius: 50%;\r\n  height: 7px;\r\n  margin-right: 4px;\r\n  vertical-align: middle;\r\n  width: 7px;\r\n  &:nth-child(1) {\r\n    animation-delay: 200ms;\r\n  }\r\n  &:nth-child(2) {\r\n    animation-delay: 300ms;\r\n  }\r\n  &:nth-child(3) {\r\n    animation-delay: 400ms;\r\n  }\r\n  animation: ${typingAnimation} 1.8s infinite ease-in-out;\r\n`;\r\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport cuid from \"cuid\";\n\nfunction MessageWithButton({ buttons, text, onBtnClick }) {\n  return (\n    <Card>\n      <StyledH3>{text}</StyledH3>\n      <StyledUl>\n        {buttons?.map((btn) => (\n          <StyledLi\n            onClick={() => {\n              onBtnClick(btn);\n            }}\n            key={cuid()}\n          >\n            {btn?.title}\n          </StyledLi>\n        ))}\n      </StyledUl>\n    </Card>\n  );\n}\n\nexport default MessageWithButton;\n\nconst Card = styled.div`\n  max-width: 300px;\n  text-align: center;\n`;\nconst StyledH3 = styled.h3`\n  margin: 0px;\n  /* background-color: #9b9b9b; */\n  background-color: #0073a5;\n  padding: 20px 0px;\n  border-top-left-radius: 20px;\n  border-top-right-radius: 20px;\n  color: white;\n  border: 1px solid #f0f0f0;\n`;\nconst StyledUl = styled.ul`\n  padding: 0px;\n  list-style: none;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  margin: 0px;\n  border: 1px solid #f0f0f0;\n  border-bottom-left-radius: 20px;\n  border-bottom-right-radius: 20px;\n`;\nconst StyledLi = styled.li`\n  border-bottom: 1px solid #f0f0f0;\n  width: 100%;\n  padding: 10px 0px;\n  color: #9b9b9b;\n  cursor: pointer;\n  &:hover {\n    color: #0073a5;\n  }\n  &:last-child {\n    border-bottom: none;\n  }\n`;\n","import React, { useState, useEffect, useRef } from \"react\";\r\nimport styled from \"styled-components\";\r\nimport send from \"../images/send.png\";\r\nimport { io } from \"socket.io-client\";\r\nimport botIcon from \"../images/bot-icon.png\";\r\nimport Typing from \"./Typing\";\r\nimport MessageWithButton from \"./MessageWithButton\";\r\nimport cuid from \"cuid\";\r\n\r\nconst socket = io(\"wss://english-bot-test.herokuapp.com/\");\r\n\r\n// eslint-disable-next-line no-sparse-arrays\r\nconst feedbackCorrection = [\r\n  \"You are too close , but the write answer is {ANSWER}\",\r\n  \"The correct answer is {ANSWER}\",\r\n  \"{ANSWER} this is the correct\",\r\n  \" Oh sorry , the write answer is {ANSWER}\",\r\n];\r\n\r\nconst feedbackRight = [\r\n  \"You are right 🤩\",\r\n  \"you are too good\",\r\n  \"great 👏\",\r\n  \"Nice 😁😁\",\r\n  \"You are right ✅ \",\r\n];\r\n\r\nconst end = [\r\n  \"Happy end\",\r\n  \"See you later🙋‍♀️\",\r\n  \" Peace out🥳\",\r\n  \" It was nice to see you again🙋‍♀️\",\r\n  \"Take care\",\r\n  \"I look forward to our next dialogue\",\r\n  \"Good bye\",\r\n  \"Bye bye!👋\",\r\n  \"Have a nice day\",\r\n  \"Goodnight\",\r\n  \"I’m out of here\",\r\n  \"🥳\",\r\n];\r\n\r\nconst Chat = () => {\r\n  const ref = useRef();\r\n\r\n  const [questionNo, setQuestionNo] = useState(\r\n    JSON.parse(localStorage.getItem(\"bot\"))?.questionNo || 0\r\n  );\r\n  const [modelNo, setModelNo] = useState(\r\n    JSON.parse(localStorage.getItem(\"bot\"))?.modelNo ||\r\n      Math.floor(Math.random() * 3)\r\n  );\r\n  const [messages, setMessages] = useState(\r\n    JSON.parse(localStorage.getItem(\"messages\"))?.messages || []\r\n  );\r\n\r\n  const [msg, setMsg] = useState({ text: \"\" });\r\n\r\n  const [typing, setTyping] = useState(\r\n    JSON.parse(localStorage.getItem(\"bot\"))?.typing ?? true\r\n  );\r\n  const [botMsg, setBotMsg] = useState(\r\n    JSON.parse(localStorage.getItem(\"bot\"))?.botMsg || {}\r\n  );\r\n  const [currentQuestionType, setCurrentQuestionType] = useState(\r\n    JSON.parse(localStorage.getItem(\"bot\"))?.currentQuestionType || \"intro\"\r\n  );\r\n\r\n  const scrollToBottom = () => {\r\n    ref.current.addEventListener(\"DOMNodeInserted\", (event) => {\r\n      const { currentTarget: target } = event;\r\n      target.scroll({ top: target.scrollHeight, behavior: \"smooth\" });\r\n    });\r\n  };\r\n\r\n  useEffect(() => {\r\n    localStorage.setItem(\r\n      \"bot\",\r\n      JSON.stringify({\r\n        questionNo,\r\n        currentQuestionType,\r\n        botMsg,\r\n        typing,\r\n        modelNo,\r\n      })\r\n    );\r\n  }, [questionNo, currentQuestionType, botMsg, typing, modelNo]);\r\n\r\n  useEffect(() => {\r\n    localStorage.setItem(\"messages\", JSON.stringify({ messages }));\r\n  }, [messages]);\r\n\r\n  useEffect(() => {\r\n    if (messages.length === 0) {\r\n      setTimeout(() => {\r\n        socket.emit(\"getIntroQuestion\", { questionNo });\r\n        socket.on(\"responseIntroQuestion\", ({ message, last }) => {\r\n          setMessages([\r\n            ...messages,\r\n            { from: \"English BOT\", text: message.text },\r\n          ]);\r\n          if (!last) {\r\n            setQuestionNo(questionNo + 1);\r\n          }\r\n          setTyping(false);\r\n        });\r\n      }, 2000);\r\n    }\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (currentQuestionType === \"model\") {\r\n      socket.off(\"checkGrammerResult\");\r\n      socket.on(\"checkGrammerResult\", ({ message, result: checkResult }) => {\r\n        const { result, corrections } = checkResult;\r\n        if (\r\n          corrections?.length === 0 ||\r\n          message?.toLowerCase().replace(/\\ /g, \"\") ===\r\n            result?.toLocaleLowerCase().replace(/\\ /g, \"\")\r\n        ) {\r\n          setTyping(false);\r\n          setMessages([\r\n            ...messages,\r\n            {\r\n              from: \"English BOT\",\r\n              text: feedbackRight[\r\n                Math.floor(Math.random() * (feedbackRight.length - 1))\r\n              ],\r\n              type: message?.type,\r\n              buttons: message?.buttons,\r\n            },\r\n          ]);\r\n        } else {\r\n          setTyping(false);\r\n          setMessages([\r\n            ...messages,\r\n            {\r\n              from: \"English BOT\",\r\n              text: `\r\n              ${feedbackCorrection[\r\n                Math.floor(Math.random() * (feedbackCorrection.length - 1))\r\n              ].replace(\"{ANSWER}\", `<strong>${result}</strong>`)}\r\n              `,\r\n              type: message?.type,\r\n              buttons: message?.buttons,\r\n            },\r\n          ]);\r\n        }\r\n        if (!botMsg.last) {\r\n          socket.emit(\"getModelQuestion\", { questionNo, modelNo });\r\n        } else {\r\n          socket.emit(\"getEndQuestion\", {});\r\n        }\r\n      });\r\n    }\r\n\r\n    setCurrentQuestionType(currentQuestionType);\r\n\r\n    // close the older listener then open new one\r\n    socket.off(\"responseIntroQuestion\");\r\n    socket.off(\"responseModelQuestion\");\r\n\r\n    socket.on(\"responseIntroQuestion\", ({ message, last }) => {\r\n      setMessages([\r\n        ...messages,\r\n        {\r\n          from: \"English BOT\",\r\n          text: message.text,\r\n          type: message?.type,\r\n          buttons: message?.buttons,\r\n        },\r\n      ]);\r\n      setBotMsg({ message, last });\r\n      if (!last) {\r\n        setQuestionNo(questionNo + 1);\r\n      }\r\n      setTyping(false);\r\n    });\r\n\r\n    socket.on(\"responseModelQuestion\", ({ message, last }) => {\r\n      setMessages([\r\n        ...messages,\r\n        {\r\n          from: \"English BOT\",\r\n          text: message.text,\r\n          type: message?.type,\r\n          buttons: message?.buttons,\r\n        },\r\n      ]);\r\n      setBotMsg({ message, last });\r\n      if (!last) {\r\n        setQuestionNo(questionNo + 1);\r\n      } else {\r\n        setMessages([\r\n          ...messages,\r\n          {\r\n            from: \"English BOT\",\r\n            text: end[Math.floor(Math.random() * (end.length - 1))],\r\n          },\r\n        ]);\r\n        setCurrentQuestionType(\"end\");\r\n      }\r\n\r\n      setTyping(false);\r\n    });\r\n\r\n    scrollToBottom();\r\n  }, [messages, questionNo, msg.text, currentQuestionType]);\r\n\r\n  const sendMsgSubmit = (e) => {\r\n    e.preventDefault();\r\n    setMessages([...messages, { from: \"Me\", text: msg.text }]);\r\n    setTyping(true);\r\n    if (\r\n      botMsg?.message?.response?.length > 0 &&\r\n      currentQuestionType === \"intro\"\r\n    ) {\r\n      setTimeout(() => {\r\n        const response =\r\n          botMsg.message.response[\r\n            Math.floor(Math.random() * (botMsg.message.response.length - 1))\r\n          ];\r\n        setMessages([\r\n          ...messages,\r\n          { from: \"Me\", text: msg.text },\r\n          { from: \"English BOT\", text: response },\r\n        ]);\r\n        if (!botMsg.last) {\r\n          setTyping(true);\r\n          socket.emit(\"getIntroQuestion\", { questionNo });\r\n        } else {\r\n          setQuestionNo(0);\r\n          socket.emit(\"getModelQuestion\", { questionNo, modelNo });\r\n          setBotMsg({});\r\n          setCurrentQuestionType(\"model\");\r\n        }\r\n      }, 1000);\r\n    }\r\n    if (currentQuestionType === \"model\") {\r\n      socket.emit(\"checkGrammer\", { ...msg, _id: botMsg.message._id });\r\n      setBotMsg({});\r\n    }\r\n    setMsg({ text: \"\" });\r\n  };\r\n\r\n  const onBtnClick = (message) => {\r\n    setMessages([...messages, { from: \"Me\", text: message.title }]);\r\n    setTimeout(() => {\r\n      setTyping(false);\r\n      if (message.correct === true) {\r\n        setMessages([\r\n          ...messages,\r\n          { from: \"Me\", text: message.title },\r\n          {\r\n            from: \"English BOT\",\r\n            text: feedbackRight[\r\n              Math.floor(Math.random() * (feedbackRight.length - 1))\r\n            ],\r\n            type: message?.type,\r\n            buttons: message?.buttons,\r\n          },\r\n        ]);\r\n      } else {\r\n        const result = botMsg.message.buttons.find(\r\n          (btn) => btn.correct === true\r\n        )?.title;\r\n        console.log(botMsg.message.buttons);\r\n\r\n        setMessages([\r\n          ...messages,\r\n          { from: \"Me\", text: message.title },\r\n          {\r\n            from: \"English BOT\",\r\n            text: `\r\n            ${feedbackCorrection[\r\n              Math.floor(Math.random() * (feedbackCorrection.length - 1))\r\n            ].replace(\"{ANSWER}\", `<strong>${result}</strong>`)}\r\n            `,\r\n            type: message?.type,\r\n            buttons: message?.buttons,\r\n          },\r\n        ]);\r\n      }\r\n      if (!botMsg.last) {\r\n        socket.emit(\"getModelQuestion\", { questionNo, modelNo });\r\n      } else {\r\n        socket.emit(\"getEndQuestion\", {});\r\n      }\r\n    }, 1000);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <StyledMessages ref={ref}>\r\n        {messages.map(({ from, text, type, buttons }, index) => (\r\n          <>\r\n            {from === \"English BOT\" ? (\r\n              <StyledBotDiv key={cuid()}>\r\n                <img src={botIcon} alt=\" \" />\r\n\r\n                {type === \"@message-type/button\" ? (\r\n                  <MessageWithButton\r\n                    buttons={buttons}\r\n                    text={text}\r\n                    setMessages={setMessages}\r\n                    messages={messages}\r\n                    socket={socket}\r\n                    onBtnClick={onBtnClick}\r\n                  />\r\n                ) : (\r\n                  <span\r\n                    dangerouslySetInnerHTML={{\r\n                      __html: `\r\n                    <style>\r\n                    strong{\r\n                      color: #74eaf4;\r\n                    }\r\n                    </style>\r\n                    <div>${text}</div>\r\n                    `,\r\n                    }}\r\n                  ></span>\r\n                )}\r\n              </StyledBotDiv>\r\n            ) : (\r\n              <StyledMeDiv key={index}>\r\n                <span>{text}</span>\r\n              </StyledMeDiv>\r\n            )}\r\n          </>\r\n        ))}\r\n      </StyledMessages>\r\n      {typing && <Typing />}\r\n      <StyledDiv onSubmit={(e) => sendMsgSubmit(e)}>\r\n        <input\r\n          value={msg.text}\r\n          onChange={(e) => setMsg({ text: e.target.value })}\r\n          type=\"text\"\r\n          placeholder=\"send a message...\"\r\n        />\r\n        <button type=\"submit\">\r\n          <img src={send} alt=\"\" />\r\n        </button>\r\n      </StyledDiv>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Chat;\r\n\r\nconst StyledDiv = styled.form`\r\n  display: flex;\r\n  width: 100%;\r\n  border-top: 1px solid rgb(230, 230, 230);\r\n  input {\r\n    border: none;\r\n    height: 40px;\r\n    width: 80%;\r\n    padding: 10px 20px;\r\n    outline: 0;\r\n  }\r\n  button {\r\n    border: none;\r\n    background-color: white;\r\n    width: 18%;\r\n    display: flex;\r\n    justify-content: end;\r\n    align-items: center;\r\n    img {\r\n      width: 32px;\r\n      height: 32px;\r\n    }\r\n  }\r\n`;\r\n\r\nconst StyledMessages = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  max-height: 400px;\r\n  min-height: 400px;\r\n  background: white;\r\n  overflow-y: auto;\r\n  padding: 15px 20px;\r\n  span {\r\n    width: fit-content;\r\n    height: fit-content;\r\n    border-top-left-radius: 10px;\r\n    border-top-right-radius: 10px;\r\n    border-bottom-right-radius: 10px;\r\n    margin-bottom: 10px;\r\n  }\r\n`;\r\n\r\nconst StyledBotDiv = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  span {\r\n    background-color: #9b9b9b;\r\n    color: white;\r\n    padding: 10px;\r\n  }\r\n  img {\r\n    width: 40px;\r\n    height: 40px;\r\n    margin-right: 10px;\r\n  }\r\n`;\r\n\r\nconst StyledMeDiv = styled.div`\r\n  margin-left: auto;\r\n  span {\r\n    display: block;\r\n    background-color: #0073a5;\r\n    color: white;\r\n    margin-left: 10px;\r\n    padding: 10px;\r\n  }\r\n`;\r\n\r\nconst StyledCorrectDiv = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  strong {\r\n    /* display: inline-block; */\r\n    color: #74eaf4;\r\n    margin: 0px 0px 0px 10px;\r\n  }\r\n`;\r\n","import React, { useState } from \"react\";\r\nimport styled from \"styled-components\";\r\nimport englishBot from \"../images/english.png\";\r\nimport leftArrow from \"../images/left-arrow.png\";\r\nimport Chat from \"./Chat\";\r\n\r\nconst Bot = () => {\r\n  const [active, setActive] = useState(false);\r\n  return (\r\n    <>\r\n      <Header>\r\n        <Container>\r\n          {active && (\r\n            <StyledBackImg\r\n              onClick={() => setActive(false)}\r\n              src={leftArrow}\r\n              alt=\"\"\r\n            />\r\n          )}\r\n\r\n          <StyledH1>\r\n            <StyledBotImg src={englishBot} alt=\"\" />\r\n            <span> English Bot </span>\r\n          </StyledH1>\r\n          <p>I can help you to improve your english.</p>\r\n        </Container>\r\n      </Header>\r\n      <Container>\r\n        <Content>\r\n          {!active && (\r\n            <StyledDiv>\r\n              <h3>Get Started</h3>\r\n              <div>\r\n                <span className=\"replyNote\">My usual reply time</span>\r\n                <br />\r\n                <span className=\"replyTome\">🕓 Under 1 min</span>\r\n              </div>\r\n              <button onClick={() => setActive(true)}>Get Started</button>\r\n            </StyledDiv>\r\n          )}\r\n          {active && <Chat />}\r\n        </Content>\r\n      </Container>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Bot;\r\n\r\n//styles\r\nconst Container = styled.div`\r\n  padding: 0px 25px;\r\n`;\r\n\r\nconst StyledBackImg = styled.img`\r\n  width: 20px;\r\n  height: 20px;\r\n  margin: 0px 10px 20px 0px;\r\n  cursor: pointer;\r\n`;\r\nconst StyledBotImg = styled.img`\r\n  width: 50px;\r\n  height: 50px;\r\n  margin-right: 10px;\r\n`;\r\nconst Header = styled.div`\r\n  color: white;\r\n  background-color: #14243d;\r\n  padding: 40px 20px 100px 20px;\r\n  p {\r\n    font-size: 20px;\r\n  }\r\n`;\r\n\r\nconst StyledH1 = styled.h1`\r\n  margin: 10px 0px 0px 0px;\r\n  font-weight: 500;\r\n  display: flex;\r\n  align-items: center;\r\n`;\r\n\r\nconst Content = styled.div`\r\n  margin: -70px 0px 0px 0px;\r\n  background-color: white;\r\n  border-radius: 5px;\r\n  box-shadow: rgb(0 0 0 / 10%) 0px 4px 15px 0px,\r\n    rgb(0 0 0 / 10%) 0px 1px 2px 0px, rgb(32 43 57 / 50%) 0px -2px 0px 0px;\r\n  display: flex;\r\n  flex-direction: column;\r\n`;\r\n\r\nconst StyledDiv = styled.div`\r\n  padding: 15px 20px;\r\n  .replyNote {\r\n    color: gray;\r\n    margin: 0px 0px 5px 0px;\r\n  }\r\n  .replyTome {\r\n    font-weight: bold;\r\n  }\r\n  button {\r\n    border: none;\r\n    background-color: #763c1a;\r\n    color: white;\r\n    padding: 15px 20px;\r\n    border-radius: 30px;\r\n    font-weight: 600;\r\n    font-size: 16px;\r\n    cursor: pointer;\r\n    width: 200px;\r\n    margin: 30px 0px 40px 0px;\r\n    transition: background-color 0.1s ease-in;\r\n    &:hover {\r\n      background-color: #bc6a39;\r\n    }\r\n  }\r\n`;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport axios from \"axios\";\r\n\r\n//here we create context object\r\nconst Context = React.createContext();\r\n\r\nexport const DataContext = ({ children }) => {\r\n  const [newData, setNewData] = useState({});\r\n  const fetchData = async () => {\r\n    // const { data } = await axios.get(`/api/bot/${window.botSettings.id}`);\r\n    // const { data } = await axios.get(\r\n    //   `https://chat-plugv1.herokuapp.com/api/bot/614e63e0632c5bf001304b56?fbclid=IwAR2yTQqEV0CooA_1o3IUj0GyUgRTx00PpYFA9V_dBBphDn7wDowCsX6ZVVA`\r\n    // );\r\n    const { data } = await axios.get(\r\n      \"https://english-bot-test.herokuapp.com/api/bot-flow\"\r\n    );\r\n    setNewData(data);\r\n  };\r\n  useEffect(() => {\r\n    fetchData();\r\n  }, []);\r\n\r\n  return <Context.Provider value={newData}>{children}</Context.Provider>;\r\n};\r\n\r\nexport default Context;\r\n","import React from \"react\";\nimport Bot from \"./components/Bot\";\nimport { DataContext } from \"./contexts/dataContext\";\n\nconst App = () => {\n  return (\n    <DataContext>\n      <Bot />\n    </DataContext>\n  );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nimport \"./App.css\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}